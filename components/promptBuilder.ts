import type { SaveData, Entity, Status, Quest, GameHistoryEntry, CustomRule, KnownEntities } from './types.ts';
import { MBTI_PERSONALITIES } from './data/mbti.ts';
import { EnhancedRAG } from './utils/EnhancedRAG';
import { MemoryAnalytics } from './utils/MemoryAnalytics';
import { ReferenceBasedRAG, type CompactRAGContext } from './utils/ReferenceBasedRAG';
import { ruleActivationEngine, type ActivationContext } from './utils/RuleActivationEngine';

// Helper function to normalize skill names (remove mastery level in parentheses)
const normalizeName = (raw: string): string => {
    return (raw ?? "")
        .toLowerCase()
        .replace(/\s*\(.*?\)\s*/g, "")  // Remove (S∆° C·∫•p), (Trung C·∫•p)...
        .replace(/\s+/g, " ")
        .trim();
};

// Aggressive Token Management for 100k hard limit
const TOKEN_CONFIG = {
    MAX_TOKENS_PER_TURN: 90000,  // 90k hard limit with 10k buffer
    TOKEN_BUFFER: 10000,         // 10k safety buffer
    CHARS_PER_TOKEN: 1.2,        // Conservative token estimation
    
    // Aggressive allocation for strict 100k budget
    ALLOCATION: {
        CRITICAL: 0.50,      // 45k tokens - Party, action context only
        IMPORTANT: 0.25,     // 22.5k tokens - Essential entities, key quests
        CONTEXTUAL: 0.15,    // 13.5k tokens - Minimal world info
        SUPPLEMENTAL: 0.10   // 9k tokens - Rules, misc (reduced)
    },
    
    // Reference-based RAG settings
    USE_REFERENCE_RAG: true,     // Enable reference-based RAG for token efficiency
    REFERENCE_RAG_TOKEN_LIMIT: 600  // Max tokens for reference-based context
};

// Entity relevance scoring
interface EntityRelevance {
    entity: Entity;
    score: number;
    reason: string[];
}

// Memory with relevance scoring
interface ScoredMemory {
    memory: string;
    score: number;
    type: 'turn' | 'chapter' | 'memoir';
}

export class EnhancedRAGSystem {
    private semanticCache = new Map<string, Set<string>>();
    private entityGraph = new Map<string, Set<string>>();
    private currentGameState?: SaveData; // Store current game state for choice context
    
    constructor() {
        this.initializeSystem();
    }

    private initializeSystem() {
        // Initialize any preprocessing needed
    }
    
    // Removed unused buildCOTTemplate method - COT is now handled only by buildAdvancedCOTPrompt when enabled

    // Main entry point - builds the enhanced RAG prompt
    public buildEnhancedPrompt(
        action: string,
        gameState: SaveData,
        ruleChangeContext: string = '',
        playerNsfwRequest: string = '',
        enableCOT: boolean = true
    ): string {
        const startTime = performance.now();
        
        console.log(`üîç DEBUG: buildEnhancedPrompt received enableCOT: ${enableCOT} (type: ${typeof enableCOT})`);
        
        // Defensive check for gameState
        if (!gameState) {
            console.error('üö® buildEnhancedPrompt: gameState is null/undefined, using fallback');
            return `H√†nh ƒë·ªông: ${action}\nTr·∫°ng th√°i: L·ªói h·ªá th·ªëng, kh√¥ng th·ªÉ x·ª≠ l√Ω gameState.`;
        }
        
        try {
            // Store current game state for choice context
            this.currentGameState = gameState;
            
            // Step 1: Choose RAG strategy based on configuration
            let intelligentContext;
            let compactContext: CompactRAGContext | null = null;
            
            if (TOKEN_CONFIG.USE_REFERENCE_RAG) {
                // Use Reference-based RAG for token efficiency
                compactContext = ReferenceBasedRAG.buildCompactContext(gameState, action, {
                    maxMemories: 6,
                    maxTokens: TOKEN_CONFIG.REFERENCE_RAG_TOKEN_LIMIT,
                    importanceThreshold: 35,
                    recencyWeight: 0.3,
                    relevanceWeight: 0.5,
                    diversityWeight: 0.2,
                    includeArchived: false
                });
                
                // No traditional context needed when using reference RAG
                intelligentContext = null;
            } else {
                // Use traditional Enhanced RAG
                intelligentContext = EnhancedRAG.buildIntelligentContext(gameState, action, {
                    maxMemories: 5,
                    maxTokens: 1000,
                    importanceThreshold: 35,
                    recencyWeight: 0.3,
                    relevanceWeight: 0.5,
                    diversityWeight: 0.2,
                    includeArchived: false
                });
            }
            
            // Step 2: Analyze action intent
            const actionIntent = this.analyzeActionIntent(action);
            
            // Step 3: Build entity relationship graph
            this.buildEntityGraph(gameState.knownEntities);
            
            // Step 4: Score and retrieve relevant entities (enhanced with context)
            const relevantEntities = compactContext ? 
                // Use entity references from compact context when available
                compactContext.entityReferences.map(ref => ({
                    entity: ReferenceBasedRAG.getEntityByReference(ref.referenceId) || ref as any,
                    score: ref.relevanceScore,
                    reason: [`Reference: ${ref.referenceId}`]
                })).filter(e => e.entity) :
                // Traditional entity retrieval as fallback
                this.retrieveRelevantEntities(
                    action,
                    actionIntent,
                    gameState,
                    intelligentContext
                );
            
            // Step 5: Calculate dynamic token budgets (accounting for context type)
            const contextTokenUsage = compactContext ? 
                (compactContext.originalTokens - compactContext.tokensSaved) : 
                (intelligentContext?.tokenUsage || 0);
            const tokenBudget = this.calculateDynamicTokenBudget(
                relevantEntities,
                gameState,
                contextTokenUsage
            );
            
            // Step 5: Build context sections with priority
            const contextSections = this.buildPrioritizedContext(
                relevantEntities,
                gameState,
                tokenBudget,
                action
            );
            
            // Step 6: Assemble final prompt with appropriate context
            const finalPrompt = this.assembleFinalPrompt(
                action,
                contextSections,
                ruleChangeContext,
                playerNsfwRequest,
                gameState.worldData,
                intelligentContext,
                compactContext,
                gameState,
                enableCOT
            );
            
            const endTime = performance.now();
            console.log(`RAG processing time: ${(endTime - startTime).toFixed(2)}ms`);
            
            return this.enforceTokenLimit(finalPrompt);
            
        } catch (error) {
            console.error('Enhanced RAG Error:', error);
            // Fallback to basic prompt
            return this.buildFallbackPrompt(action, gameState);
        }
    }

    // Analyze the player's action to understand intent
    private analyzeActionIntent(action: string): ActionIntent {
        const lowerAction = action.toLowerCase();
        const intent: ActionIntent = {
            type: 'general',
            targets: [],
            keywords: [],
            isMovement: false,
            isCombat: false,
            isSocial: false,
            isItemUse: false,
            isSkillUse: false,
            isExploration: false
        };

        // Movement patterns
        if (/ƒëi|ch·∫°y|leo|nh·∫£y|bay|di chuy·ªÉn|t·ªõi|ƒë·∫øn|r·ªùi|v·ªÅ/.test(lowerAction)) {
            intent.isMovement = true;
            intent.type = 'movement';
        }

        // Combat patterns
        if (/t·∫•n c√¥ng|ƒë√°nh|ch√©m|ƒë√¢m|b·∫Øn|n√©m|chi·∫øn ƒë·∫•u|gi·∫øt/.test(lowerAction)) {
            intent.isCombat = true;
            intent.type = 'combat';
        }

        // Social patterns
        if (/n√≥i|h·ªèi|tr·∫£ l·ªùi|thuy·∫øt ph·ª•c|d·ªça|giao d·ªãch|mua|b√°n/.test(lowerAction)) {
            intent.isSocial = true;
            intent.type = 'social';
        }

        // Item use patterns
        if (/s·ª≠ d·ª•ng|d√πng|u·ªëng|ƒÉn|trang b·ªã|th√°o|cho|l·∫•y/.test(lowerAction)) {
            intent.isItemUse = true;
            intent.type = 'item_interaction';
        }

        // Skill use patterns
        if (/thi tri·ªÉn|s·ª≠ d·ª•ng.*ph√°p|c√¥ng ph√°p|k·ªπ nƒÉng/.test(lowerAction)) {
            intent.isSkillUse = true;
            intent.type = 'skill_use';
        }

        // Extract potential entity targets
        intent.targets = this.extractPotentialTargets(action);
        intent.keywords = this.extractKeywords(action);

        return intent;
    }

    // Build entity relationship graph for better retrieval
    private buildEntityGraph(entities: KnownEntities) {
        this.entityGraph.clear();
        
        if (!entities || typeof entities !== 'object') {
            return;
        }
        
        for (const [name, entity] of Object.entries(entities)) {
            const connections = new Set<string>();
            
            // Add connections based on entity properties
            if (entity.owner) connections.add(entity.owner);
            if (entity.location) connections.add(entity.location);
            
            // Parse description for entity mentions
            const description = (entity.description || '').toLowerCase();
            for (const [otherName, otherEntity] of Object.entries(entities)) {
                if (name !== otherName && description.includes(otherName.toLowerCase())) {
                    connections.add(otherName);
                }
            }
            
            // Special handling for NPCs with skills
            if (entity.skills && Array.isArray(entity.skills)) {
                entity.skills.forEach(skill => connections.add(skill));
            }
            
            this.entityGraph.set(name, connections);
        }
    }

    // Enhanced entity retrieval with relevance scoring
    private retrieveRelevantEntities(
        action: string,
        intent: ActionIntent,
        gameState: SaveData,
        intelligentContext?: any
    ): EntityRelevance[] {
        const { knownEntities, party, gameHistory, statuses } = gameState;
        const relevanceScores: EntityRelevance[] = [];
        
        // Always include party members with high relevance
        if (Array.isArray(party)) {
            party.forEach(member => {
                relevanceScores.push({
                    entity: member,
                    score: 100,
                    reason: ['Party member']
                });
            });
        }

        // Score all other entities
        for (const [name, entity] of Object.entries(knownEntities)) {
            if (Array.isArray(party) && party.some(p => p.name === name)) continue;
            
            let score = 0;
            const reasons: string[] = [];
            
            // Direct mention in action
            if (action.toLowerCase().includes(name.toLowerCase())) {
                score += 50;
                reasons.push('Directly mentioned');
            }
            
            // Mentioned in recent history (sliding window)
            const recentMentions = this.countRecentMentions(name, gameHistory, 3);
            if (recentMentions > 0) {
                score += Math.min(30, recentMentions * 10);
                reasons.push(`Recent mentions: ${recentMentions}`);
            }
            
            // Location matching for PC
            const pc = party.find(p => p.type === 'pc');
            if (pc?.location && entity.location === pc.location) {
                score += 20;
                reasons.push('Same location as PC');
            }
            
            // Type relevance based on intent
            score += this.getTypeRelevanceScore(entity.type, intent);
            
            // Enhanced companion skill matching
            if (entity.type === 'companion' && entity.skills) {
                const skillsArray = Array.isArray(entity.skills) ? entity.skills : entity.skills.split(',').map(s => s.trim());
                const skillMatch = this.getCompanionSkillRelevance(skillsArray, action, intent);
                score += skillMatch;
                if (skillMatch > 0) {
                    reasons.push(`Relevant skills: ${skillsArray.slice(0, 2).join(', ')}`);
                }
            }
            
            // Graph connections
            const connections = this.entityGraph.get(name) || new Set();
            const connectedToRelevant = Array.from(connections).some(conn => 
                relevanceScores.some(r => r.score > 50 && r.entity.name === conn)
            );
            if (connectedToRelevant) {
                score += 15;
                reasons.push('Connected to relevant entity');
            }
            
            // Status effects
            if (statuses.some(s => s.owner === name)) {
                score += 10;
                reasons.push('Has active status');
            }
            
            if (score > 0) {
                relevanceScores.push({ entity, score, reason: reasons });
            }
        }
        
        // Sort by relevance (no threshold filtering)
        return relevanceScores
            .sort((a, b) => b.score - a.score);
    }

    // Calculate dynamic token budgets based on context
    private calculateDynamicTokenBudget(
        relevantEntities: EntityRelevance[],
        gameState: SaveData,
        intelligentContextTokens: number = 0
    ): TokenBudget {
        const baseLimit = TOKEN_CONFIG.MAX_TOKENS_PER_TURN - TOKEN_CONFIG.TOKEN_BUFFER;
        
        // Analyze context complexity
        const hasActiveQuests = gameState.quests?.some(q => q.status === 'active') || false;
        const hasComplexHistory = gameState.gameHistory.length > 20;
        const hasManyCriticalEntities = relevantEntities.filter(r => r.score > 70).length > 5;
        
        // Adjust allocations based on context
        let criticalWeight = TOKEN_CONFIG.ALLOCATION.CRITICAL;
        let importantWeight = TOKEN_CONFIG.ALLOCATION.IMPORTANT;
        
        if (hasManyCriticalEntities) {
            criticalWeight += 0.1;
            importantWeight -= 0.05;
        }
        
        if (!hasActiveQuests) {
            importantWeight -= 0.05;
            criticalWeight += 0.05;
        }
        
        return {
            critical: Math.floor(baseLimit * criticalWeight),
            important: Math.floor(baseLimit * importantWeight),
            contextual: Math.floor(baseLimit * TOKEN_CONFIG.ALLOCATION.CONTEXTUAL),
            supplemental: Math.floor(baseLimit * TOKEN_CONFIG.ALLOCATION.SUPPLEMENTAL)
        };
    }

    // Build prioritized context sections
    private buildPrioritizedContext(
        relevantEntities: EntityRelevance[],
        gameState: SaveData,
        budget: TokenBudget,
        playerInput?: string
    ): ContextSections {
        const sections: ContextSections = {
            critical: '',
            important: '',
            contextual: '',
            supplemental: ''
        };

        // Critical: All entities and immediate context (no filtering by score)
        sections.critical = this.buildCriticalContext(
            relevantEntities,
            gameState,
            budget.critical
        );

        // Important: Additional context, active quests, recent history
        sections.important = this.buildImportantContext(
            relevantEntities,
            gameState,
            budget.important
        );

        // Contextual: World info, chronicle, memories
        sections.contextual = this.buildContextualInfo(
            gameState,
            budget.contextual
        );

        // Supplemental: Custom rules and additional context (enhanced with new activation engine)
        sections.supplemental = this.buildSupplementalContext(
            gameState,
            relevantEntities,
            budget.supplemental,
            playerInput
        );

        return sections;
    }

    // Helper methods for context building
    private buildCriticalContext(
        entities: EntityRelevance[],
        gameState: SaveData,
        tokenBudget: number
    ): string {
        let context = "=== TRI TH·ª®C QUAN TR·ªåNG ===\n";
        let usedTokens = this.estimateTokens(context);
        
        // Add Vietnamese choice instructions at the beginning of critical context
        const choiceInstructions = this.buildCoreGameInstructions();
        context += "\n" + choiceInstructions + "\n\n";
        usedTokens += this.estimateTokens(choiceInstructions);
        
        // Add time and turn info
        const timeInfo = this.formatGameTime(gameState.gameTime, gameState.turnCount);
        context += timeInfo + "\n\n";
        usedTokens += this.estimateTokens(timeInfo);
        
        // Dedicated party section for enhanced coordination  
        const partyContext = this.buildEnhancedPartyContext(gameState, Math.floor(tokenBudget * 0.4));
        if (partyContext) {
            context += partyContext + "\n";
            usedTokens += this.estimateTokens(partyContext);
        }
        
        // Add remaining entities with detailed info (no filtering by type)
        const remainingBudget = tokenBudget - usedTokens;
        const nonPartyEntities = entities.filter(e => e.entity.type !== 'companion');
        const tokensPerEntity = Math.floor(remainingBudget / Math.max(1, nonPartyEntities.length));
        
        nonPartyEntities.forEach(({ entity, score, reason }) => {
            const entityText = this.formatEntityWithContext(
                entity,
                gameState.statuses,
                reason,
                tokensPerEntity,
                gameState
            );
            
            const entityTokens = this.estimateTokens(entityText);
            if (usedTokens + entityTokens <= tokenBudget) {
                context += entityText + "\n";
                usedTokens += entityTokens;
            }
        });
        
        return context;
    }
    
    // Enhanced party coordination context for better AI understanding
    private buildEnhancedPartyContext(gameState: SaveData, maxTokens: number): string {
        const { party, statuses } = gameState;
        
        if (!party || party.length === 0) return '';
        
        let context = "**T·ªî ƒê·ªòI PHI·ªÄU L∆ØU:**\n";
        let usedTokens = this.estimateTokens(context);
        
        // Log AI context building for debugging
        if (gameState.turnCount) {
            import('./utils/partyDebugger').then(({ partyDebugger }) => {
                partyDebugger.logAIContextBuild({
                    companions: party.filter(p => p.type === 'companion'),
                    contextLength: context.length,
                    includesPersonalities: party.some(p => p.personality),
                    includesSkills: party.some(p => p.skills),
                    includesRelationships: party.some(p => p.relationship)
                }, usedTokens, gameState.turnCount);
            });
        }
        
        // PC information first
        const pc = party.find(p => p.type === 'pc');
        if (pc) {
            const pcStatuses = statuses.filter(s => s.owner === 'pc' || s.owner === pc.name);
            let pcInfo = `[Nh√¢n v·∫≠t ch√≠nh] ${pc.name}`;
            
            const pcDetails: string[] = [];
            // EMPHASIZE MOTIVATION FIRST
            if (pc.motivation) pcDetails.push(`**M·ª§C TI√äU**: ${pc.motivation}`);
            if (pc.location) pcDetails.push(`V·ªã tr√≠: ${pc.location}`);
            if (pc.realm) pcDetails.push(`Th·ª±c l·ª±c: ${pc.realm}`);
            if (pc.learnedSkills && pc.learnedSkills.length > 0) {
                const skillsWithMastery = pc.learnedSkills.map(skillName => {
                    // Normalize the skill name to find the actual skill entity
                    const normalizedSkillName = normalizeName(skillName);
                    const skillEntity = Object.values(gameState.knownEntities).find((e: any) => 
                        e.type === 'skill' && normalizeName(e.name) === normalizedSkillName
                    );
                    if (skillEntity && skillEntity.mastery) {
                        return `${skillEntity.name} (${skillEntity.mastery})`;
                    }
                    return skillName;
                });
                pcDetails.push(`K·ªπ nƒÉng: ${skillsWithMastery.join(', ')}`);
            }
            if (pcStatuses.length > 0) {
                pcDetails.push(`Tr·∫°ng th√°i: ${pcStatuses.map(s => s.name).join(', ')}`);
            }
            
            if (pcDetails.length > 0) {
                pcInfo += ` - ${pcDetails.join(', ')}`;
            }
            pcInfo += '\n';
            
            const pcTokens = this.estimateTokens(pcInfo);
            if (usedTokens + pcTokens <= maxTokens) {
                context += pcInfo;
                usedTokens += pcTokens;
            }
        }
        
        // Companions with detailed coordination info
        const companions = party.filter(p => p.type === 'companion');
        if (companions.length > 0) {
            companions.forEach(companion => {
                let companionInfo = `[ƒê·ªìng h√†nh] ${companion.name}`;
                
                const companionDetails: string[] = [];
                
                // Relationship status (critical for party dynamics)
                if (companion.relationship) {
                    companionDetails.push(`Quan h·ªá: ${companion.relationship}`);
                }
                
                // Power level for tactical coordination
                if (companion.realm) {
                    companionDetails.push(`C·∫£nh gi·ªõi: ${companion.realm}`);
                }
                
                // Key skills for party synergy
                if (companion.skills && companion.skills.length > 0) {
                    const skillsArray = Array.isArray(companion.skills) ? companion.skills : companion.skills.split(',').map(s => s.trim());
                    companionDetails.push(`Chuy√™n m√¥n: ${skillsArray.slice(0, 2).join(', ')}`);
                }
                
                // Active status effects
                const companionStatuses = statuses.filter(s => s.owner === companion.name);
                if (companionStatuses.length > 0) {
                    companionDetails.push(`Tr·∫°ng th√°i: ${companionStatuses.map(s => s.name).join(', ')}`);
                }
                
                // Core personality for AI roleplay
                if (companion.personality) {
                    const personalitySnippet = companion.personality.length > 50 
                        ? companion.personality.substring(0, 50) + '...' 
                        : companion.personality;
                    companionDetails.push(`T√≠nh c√°ch: ${personalitySnippet}`);
                }
                
                if (companionDetails.length > 0) {
                    companionInfo += ` - ${companionDetails.join(', ')}`;
                }
                companionInfo += '\n';
                
                const companionTokens = this.estimateTokens(companionInfo);
                if (usedTokens + companionTokens <= maxTokens) {
                    context += companionInfo;
                    usedTokens += companionTokens;
                }
            });
            
            // Party coordination notes
            const coordNote = "\n*L∆∞u √Ω: H√£y ch√∫ tr·ªçng ƒë·∫øn s·ª± t∆∞∆°ng t√°c v√† ph·ªëi h·ª£p gi·ªØa c√°c th√†nh vi√™n trong t·ªï ƒë·ªôi. M·ªói ƒë·ªìng h√†nh c√≥ c√° t√≠nh v√† k·ªπ nƒÉng ri√™ng, h√£y th·ªÉ hi·ªán ƒëi·ªÅu n√†y trong c√¢u chuy·ªán.*\n";
            const noteTokens = this.estimateTokens(coordNote);
            if (usedTokens + noteTokens <= maxTokens) {
                context += coordNote;
            }
        }
        
        return context;
    }

    private buildImportantContext(
        entities: EntityRelevance[],
        gameState: SaveData,
        tokenBudget: number
    ): string {
        let context = "\n=== TH√îNG TIN LI√äN QUAN ===\n";
        let usedTokens = this.estimateTokens(context);
        
        // Active quests
        const questContext = this.buildQuestContext(
            (gameState.quests || []).filter(q => q.status === 'active'),
            Math.floor(tokenBudget * 0.3)
        );
        context += questContext;
        usedTokens += this.estimateTokens(questContext);
        
        // Recent history with smart summarization
        const historyContext = this.buildSmartHistoryContext(
            gameState.gameHistory,
            Math.floor(tokenBudget * 0.4)
        );
        context += historyContext;
        usedTokens += this.estimateTokens(historyContext);
        
        // Related entities
        const remainingBudget = tokenBudget - usedTokens;
        const tokensPerEntity = Math.floor(remainingBudget / Math.max(1, entities.length));
        
        entities.forEach(({ entity, reason }) => {
            const entityText = this.formatEntityBrief(entity, reason, tokensPerEntity);
            const entityTokens = this.estimateTokens(entityText);
            
            if (usedTokens + entityTokens <= tokenBudget) {
                context += entityText + "\n";
                usedTokens += entityTokens;
            }
        });
        
        return context;
    }

    // Utility methods
    private estimateTokens(text: string): number {
        return Math.ceil(text.length * TOKEN_CONFIG.CHARS_PER_TOKEN);
    }

    private countRecentMentions(name: string, history: GameHistoryEntry[], lookback: number): number {
        const recentEntries = history.slice(-lookback * 2); // User + model entries
        let count = 0;
        
        recentEntries.forEach(entry => {
            const text = entry.parts[0].text.toLowerCase();
            const regex = new RegExp(`\\b${name.toLowerCase()}\\b`, 'g');
            const matches = text.match(regex);
            count += matches ? matches.length : 0;
        });
        
        return count;
    }

    private getTypeRelevanceScore(type: string, intent: ActionIntent): number {
        const relevanceMatrix: Record<string, Record<string, number>> = {
            'combat': { 'npc': 20, 'item': 15, 'skill': 25, 'companion': 35 }, // Higher for companions in combat
            'social': { 'npc': 30, 'companion': 40, 'faction': 20 }, // Companions excel in social situations
            'item_interaction': { 'item': 30, 'skill': 10, 'companion': 15 }, // Companions may have opinions
            'movement': { 'location': 30, 'npc': 10, 'companion': 25 }, // Companions travel together
            'skill_use': { 'skill': 40, 'item': 10, 'companion': 30 }, // Companions can assist with skills
            'general': { 'npc': 10, 'item': 10, 'location': 10, 'companion': 20 } // Always include companions
        };
        
        return relevanceMatrix[intent.type]?.[type] || 0;
    }

    // NEW: Enhanced skill relevance scoring for companions
    private getCompanionSkillRelevance(skills: string[], action: string, intent: ActionIntent): number {
        let score = 0;
        const actionLower = action.toLowerCase();
        
        // Combat skill relevance
        const combatSkills = ['chi·∫øn ƒë·∫•u', 't·∫•n c√¥ng', 'ph√≤ng th·ªß', 'ki·∫øm thu·∫≠t', 'v√µ thu·∫≠t', 'magic', 'ph√°p thu·∫≠t'];
        if (intent.isCombat && skills.some(skill => 
            combatSkills.some(combat => skill.toLowerCase().includes(combat)))) {
            score += 25;
        }
        
        // Social skill relevance  
        const socialSkills = ['thuy·∫øt ph·ª•c', 'giao ti·∫øp', 'ƒë√†m ph√°n', 'l√£nh ƒë·∫°o', 'charm'];
        if (intent.isSocial && skills.some(skill => 
            socialSkills.some(social => skill.toLowerCase().includes(social)))) {
            score += 20;
        }
        
        // Direct skill mention in action
        for (const skill of skills) {
            if (actionLower.includes(skill.toLowerCase())) {
                score += 30;
                break;
            }
        }
        
        // Movement and exploration skills
        const explorationSkills = ['do th√°m', 'stealth', 'survival', 'navigation', 'tracking'];
        if (intent.isMovement && skills.some(skill => 
            explorationSkills.some(explore => skill.toLowerCase().includes(explore)))) {
            score += 15;
        }
        
        return score;
    }

    private extractPotentialTargets(action: string): string[] {
        // Extract quoted strings and proper nouns
        const targets: string[] = [];
        
        // Extract quoted targets
        const quotedMatches = action.match(/"([^"]+)"/g);
        if (quotedMatches) {
            targets.push(...quotedMatches.map(m => m.replace(/"/g, '')));
        }
        
        // Extract capitalized words (potential entity names)
        const words = action.split(/\s+/);
        words.forEach(word => {
            if (word.length > 2 && /^[A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê]/.test(word)) {
                targets.push(word);
            }
        });
        
        return [...new Set(targets)];
    }

    private extractKeywords(action: string): string[] {
        const stopWords = new Set(['v√†', 'c·ªßa', 'l√†', 'trong', 'v·ªõi', 'ƒë·ªÉ', 'ƒë·∫øn', 't·ª´']);
        const words = action.toLowerCase().split(/\s+/)
            .filter(w => w.length > 2 && !stopWords.has(w));
        
        return [...new Set(words)];
    }

    private formatGameTime(time: any, turnCount?: number): string {
        if (!time) return 'Kh√¥ng x√°c ƒë·ªãnh';
        
        try {
            const { year, month, day, hour, minute } = time;
            const timeStr = `NƒÉm ${year || '?'} Th√°ng ${month || '?'} Ng√†y ${day || '?'}, ${hour || 0} gi·ªù ${minute || 0} ph√∫t`;
            return turnCount !== undefined ? `Th·ªùi gian: ${timeStr} (L∆∞·ª£t: ${turnCount + 1})` : timeStr;
        } catch {
            return 'L·ªói ƒë·ªãnh d·∫°ng th·ªùi gian';
        }
    }

    // UPDATED: Aggressive truncation for token control
    private aggressiveTruncation(text: string, maxTokens: number): string {
        const estimatedTokens = this.estimateTokens(text);
        
        if (estimatedTokens <= maxTokens) {
            return text;
        }
        
        // Aggressive character limit
        const charLimit = Math.floor(maxTokens / TOKEN_CONFIG.CHARS_PER_TOKEN * 0.9); // 90% safety margin
        
        if (text.length <= charLimit) {
            return text;
        }
        
        // Priority truncation - keep first and last parts
        const keepStart = Math.floor(charLimit * 0.6);
        const keepEnd = Math.floor(charLimit * 0.3);
        
        if (keepStart + keepEnd < text.length) {
            return text.substring(0, keepStart) + "\n...[n·ªôi dung ƒë√£ ƒë∆∞·ª£c r√∫t g·ªçn]...\n" + text.substring(text.length - keepEnd);
        }
        
        return text.substring(0, charLimit) + '...';
    }

    // NEW: Build smart choice generation context
    private buildSmartChoiceContext(
        sections: ContextSections,
        compactContext?: CompactRAGContext | null,
        intelligentContext?: any
    ): string | null {
        if (!this.currentGameState) return null;
        
        const gameState = this.currentGameState;
        let context = "\n--- H∆Ø·ªöNG D·∫™N T·∫†O L·ª∞A CH·ªåN TH√îNG MINH ---\n";
        
        // 1. Choice history context to prevent repetition
        const choiceHistoryContext = this.buildChoiceHistoryContext(gameState);
        if (choiceHistoryContext) {
            context += choiceHistoryContext + "\n";
        }
        
        // 2. Situational context for relevant choices
        const situationalContext = this.buildSituationalChoiceContext(gameState, sections);
        if (situationalContext) {
            context += situationalContext + "\n";
        }
        
        // 3. Party-based choice suggestions
        const partyChoiceContext = this.buildPartyChoiceContext(gameState);
        if (partyChoiceContext) {
            context += partyChoiceContext + "\n";
        }
        
        // 4. Goal-oriented choice context
        const goalContext = this.buildGoalOrientedChoiceContext(gameState);
        if (goalContext) {
            context += goalContext + "\n";
        }
        
        // 5. NEW: Choice diversity guidance
        const diversityContext = this.buildChoiceDiversityContext(gameState);
        if (diversityContext) {
            context += diversityContext + "\n";
        }
        
        context += "**QUAN TR·ªåNG**: L·ª±a ch·ªçn ph·∫£i ph√π h·ª£p v·ªõi t√¨nh hu·ªëng hi·ªán t·∫°i, kh√¥ng l·∫∑p l·∫°i nh·ªØng g√¨ ƒë√£ ch·ªçn g·∫ßn ƒë√¢y, v√† t·∫°o c∆° h·ªôi ph√°t tri·ªÉn c√¢u chuy·ªán theo h∆∞·ªõng th√∫ v·ªã.";
        
        return context;
    }
    
    // Helper method to identify choice patterns for better tracking
    private identifyChoicePatterns(choices: string[]): { type: string, examples: string[] }[] {
        const patterns: { [key: string]: string[] } = {
            'T·∫•n c√¥ng/Chi·∫øn ƒë·∫•u': [],
            'Giao ti·∫øp/Tr√≤ chuy·ªán': [],
            'Di chuy·ªÉn/Kh√°m ph√°': [],
            'Quan s√°t/Theo d√µi': [],
            'S·ª≠ d·ª•ng k·ªπ nƒÉng': [],
            'T∆∞∆°ng t√°c NSFW': [],
            'Ngh·ªâ ng∆°i/Th∆∞ gi√£n': [],
            'Kh√°c': []
        };
        
        choices.forEach(choice => {
            const lowerChoice = choice.toLowerCase();
            
            if (/t·∫•n c√¥ng|ƒë√°nh|chi·∫øn ƒë·∫•u|thi tri·ªÉn|c√¥ng k√≠ch/.test(lowerChoice)) {
                patterns['T·∫•n c√¥ng/Chi·∫øn ƒë·∫•u'].push(choice);
            } else if (/n√≥i|h·ªèi|tr√≤ chuy·ªán|giao ti·∫øp|thuy·∫øt ph·ª•c|t√°n g·∫´u/.test(lowerChoice)) {
                patterns['Giao ti·∫øp/Tr√≤ chuy·ªán'].push(choice);
            } else if (/ƒëi|di chuy·ªÉn|v·ªÅ|t·ªõi|kh√°m ph√°|t√¨m ki·∫øm|r·ªùi/.test(lowerChoice)) {
                patterns['Di chuy·ªÉn/Kh√°m ph√°'].push(choice);
            } else if (/quan s√°t|nh√¨n|theo d√µi|xem|k√≠n ƒë√°o/.test(lowerChoice)) {
                patterns['Quan s√°t/Theo d√µi'].push(choice);
            } else if (/s·ª≠ d·ª•ng.*k·ªπ nƒÉng|thi tri·ªÉn|ph√°p thu·∫≠t|k·ªπ thu·∫≠t/.test(lowerChoice)) {
                patterns['S·ª≠ d·ª•ng k·ªπ nƒÉng'].push(choice);
            } else if (/nsfw|ch·∫°m|xoa|√¢u y·∫øm|g·∫ßn g≈©i|t√¨nh d·ª•c/.test(lowerChoice)) {
                patterns['T∆∞∆°ng t√°c NSFW'].push(choice);
            } else if (/ngh·ªâ|ng∆°i|th∆∞ gi√£n|t·∫≠n h∆∞·ªüng|ng√¢m/.test(lowerChoice)) {
                patterns['Ngh·ªâ ng∆°i/Th∆∞ gi√£n'].push(choice);
            } else {
                patterns['Kh√°c'].push(choice);
            }
        });
        
        // Return only non-empty patterns
        return Object.entries(patterns)
            .filter(([_, examples]) => examples.length > 0)
            .map(([type, examples]) => ({ type, examples }));
    }
    
    // Build choice history context to avoid repetition - ENHANCED with compressed history
    private buildChoiceHistoryContext(gameState: SaveData): string | null {
        const choiceHistory = gameState.choiceHistory || [];
        const compressedHistory = gameState.compressedHistory || [];
        
        // IMPROVED: Get last 5 turns instead of 3, track selected choices
        const recentEntries = choiceHistory
            .filter(entry => gameState.turnCount - entry.turn <= 5)
            .slice(-5); // Last 5 turn entries
        
        // NEW: Extract choices from compressed history to maintain long-term memory
        const compressedChoices: string[] = [];
        if (compressedHistory.length > 0) {
            // Get choices from the most recent compressed segments
            const recentCompressed = compressedHistory.slice(-2); // Last 2 compressed segments
            recentCompressed.forEach(segment => {
                if (segment.recentChoices) {
                    compressedChoices.push(...segment.recentChoices);
                }
            });
        }
        
        // If no recent entries and no compressed choices, return null
        if (recentEntries.length === 0 && compressedChoices.length === 0) return null;
        
        // Track both available choices AND what was selected
        const selectedChoices = recentEntries
            .filter(entry => entry.selectedChoice)
            .map(entry => entry.selectedChoice)
            .slice(-8); // Last 8 selected choices
            
        const recentChoices = recentEntries
            .flatMap(entry => entry.choices)
            .slice(-15); // Last 15 offered choices
        
        // ENHANCED: Combine recent choices with compressed history choices
        const allChoices = [...compressedChoices, ...recentChoices];
        const uniqueChoices = [...new Set(allChoices)].slice(-20); // Max 20 unique choices
        
        let context = "**TR√ÅNH L·∫∂P L·∫†I - ƒêa d·∫°ng h√≥a l·ª±a ch·ªçn:**\n";
        
        if (selectedChoices.length > 0) {
            context += "H√†nh ƒë·ªông ƒë√£ ch·ªçn g·∫ßn ƒë√¢y:\n";
            selectedChoices.forEach(choice => {
                context += `‚Ä¢ ${choice}\n`;
            });
            context += "\n";
        }
        
        if (uniqueChoices.length > 0) {
            context += "L·ª±a ch·ªçn ƒë√£ ƒë∆∞a ra (bao g·ªìm l·ªãch s·ª≠ n√©n - tr√°nh tr√πng l·∫∑p):\n";
            // Group similar choices to show patterns
            const choicePatterns = this.identifyChoicePatterns(uniqueChoices);
            choicePatterns.forEach(pattern => {
                context += `‚Ä¢ Nh√≥m "${pattern.type}": ${pattern.examples.slice(0, 2).join(', ')}${pattern.examples.length > 2 ? '...' : ''}\n`;
            });
            
            // NEW: Show compressed segment info for context
            if (compressedChoices.length > 0) {
                context += `\n*ƒê√£ t√≠ch h·ª£p ${compressedChoices.length} l·ª±a ch·ªçn t·ª´ l·ªãch s·ª≠ n√©n ƒë·ªÉ tr√°nh l·∫∑p l·∫°i*\n`;
            }
        }
        
        context += "\n**Y√äU C·∫¶U**: T·∫°o l·ª±a ch·ªçn M·ªöI, KH√ÅC BI·ªÜT v√† PH√ô H·ª¢P v·ªõi t√¨nh hu·ªëng hi·ªán t·∫°i!\n";
        return context;
    }
    
    // Build situational context based on current location and entities
    private buildSituationalChoiceContext(gameState: SaveData, sections: ContextSections): string | null {
        const pc = gameState.party?.find(p => p.type === 'pc');
        if (!pc) return null;
        
        let context = "**T·∫°o l·ª±a ch·ªçn ph√π h·ª£p v·ªõi t√¨nh hu·ªëng:**\n";
        let suggestions: string[] = [];
        
        // Location-based suggestions
        if (pc.location) {
            const locationEntity = gameState.knownEntities[pc.location];
            if (locationEntity) {
                suggestions.push(`Khai th√°c ƒë·∫∑c ƒëi·ªÉm c·ªßa ƒë·ªãa ƒëi·ªÉm "${pc.location}"`);
            }
        }
        
        // Active quest suggestions
        const activeQuests = gameState.quests?.filter(q => q.status === 'active') || [];
        if (activeQuests.length > 0) {
            suggestions.push(`T·∫°o l·ª±a ch·ªçn ti·∫øn tri·ªÉn nhi·ªám v·ª•: "${activeQuests[0].title}"`);
        }
        
        // Available skills suggestions
        if (pc.learnedSkills && pc.learnedSkills.length > 0) {
            const skillsWithMastery = pc.learnedSkills.map(skillName => {
                // Normalize the skill name to find the actual skill entity
                const normalizedSkillName = normalizeName(skillName);
                const skillEntity = Object.values(gameState.knownEntities).find((e: any) => 
                    e.type === 'skill' && normalizeName(e.name) === normalizedSkillName
                );
                if (skillEntity && skillEntity.mastery) {
                    return `${skillEntity.name} (${skillEntity.mastery})`;
                }
                return skillName;
            });
            suggestions.push(`Cho ph√©p s·ª≠ d·ª•ng k·ªπ nƒÉng: ${skillsWithMastery.slice(0, 2).join(', ')}`);
        }
        
        // Social interaction suggestions based on nearby NPCs
        const nearbyNPCs = Object.values(gameState.knownEntities)
            .filter(entity => entity.type === 'npc' && entity.location === pc.location)
            .slice(0, 2);
        
        if (nearbyNPCs.length > 0) {
            suggestions.push(`T∆∞∆°ng t√°c v·ªõi: ${nearbyNPCs.map(npc => npc.name).join(', ')}`);
        }
        
        if (suggestions.length > 0) {
            context += suggestions.map(s => `‚Ä¢ ${s}`).join('\n') + '\n';
            return context;
        }
        
        return null;
    }
    
    // Build party-based choice context for companion interactions
    private buildPartyChoiceContext(gameState: SaveData): string | null {
        const companions = gameState.party?.filter(p => p.type === 'companion') || [];
        if (companions.length === 0) return null;
        
        let context = "**T·∫°o l·ª±a ch·ªçn t∆∞∆°ng t√°c v·ªõi ƒë·ªìng h√†nh:**\n";
        let suggestions: string[] = [];
        
        companions.forEach(companion => {
            // Suggest choices based on companion's skills and personality
            if (companion.skills && companion.skills.length > 0) {
                const skillsArray = Array.isArray(companion.skills) ? companion.skills : companion.skills.split(',').map(s => s.trim());
                suggestions.push(`Nh·ªù ${companion.name} s·ª≠ d·ª•ng chuy√™n m√¥n: ${skillsArray[0]}`);
            }
            
            // Relationship-based suggestions
            if (companion.relationship) {
                suggestions.push(`Trao ƒë·ªïi v·ªõi ${companion.name} d·ª±a tr√™n m·ªëi quan h·ªá: ${companion.relationship}`);
            }
        });
        
        if (suggestions.length > 0) {
            context += suggestions.slice(0, 2).map(s => `‚Ä¢ ${s}`).join('\n') + '\n';
            return context;
        }
        
        return null;
    }
    
    // Build goal-oriented choice context based on PC motivation
    private buildGoalOrientedChoiceContext(gameState: SaveData): string | null {
        const pc = gameState.party?.find(p => p.type === 'pc');
        if (!pc || !pc.motivation) return null;
        
        return `**T·∫°o l·ª±a ch·ªçn h∆∞·ªõng t·ªõi m·ª•c ti√™u nh√¢n v·∫≠t:**\n‚Ä¢ √çt nh·∫•t 1-2 l·ª±a ch·ªçn ph·∫£i li√™n quan ƒë·∫øn vi·ªác th·ª±c hi·ªán m·ª•c ti√™u: "${pc.motivation}"\n‚Ä¢ T·∫°o c∆° h·ªôi ti·∫øn g·∫ßn h∆°n ƒë·∫øn m·ª•c ti√™u ho·∫∑c gi·∫£i quy·∫øt tr·ªü ng·∫°i c·∫£n tr·ªü m·ª•c ti√™u\n`;
    }
    
    // NEW: Choice Diversity Engine - Add positive guidance for choice creation
    private buildChoiceDiversityContext(gameState: SaveData): string {
        const pc = gameState.party?.find(p => p.type === 'pc');
        const currentLocation = pc?.location;
        
        let context = "\n**H∆Ø·ªöNG D·∫™N T·∫†O L·ª∞A CH·ªåN ƒêA D·∫†NG:**\n";
        
        // Suggest different action types
        const actionTypes = [
            "üó£Ô∏è GIAO TI·∫æP: Tr√≤ chuy·ªán, h·ªèi th√¥ng tin, thuy·∫øt ph·ª•c",
            "üèÉ H√ÄNH ƒê·ªòNG: Di chuy·ªÉn, kh√°m ph√°, t∆∞∆°ng t√°c v·∫≠t th·ªÉ", 
            "‚öîÔ∏è CHI·∫æN THU·∫¨T: S·ª≠ d·ª•ng k·ªπ nƒÉng, chi·∫øn ƒë·∫•u, ph√≤ng th·ªß",
            "üß† CHI·∫æN L∆Ø·ª¢C: Quan s√°t, ph√¢n t√≠ch, l√™n k·∫ø ho·∫°ch",
            "üí≠ N·ªòI T√ÇM: Suy nghƒ© s√¢u, h·ªìi t∆∞·ªüng, quy·∫øt ƒë·ªãnh quan tr·ªçng"
        ];
        
        context += "**ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t 2-3 lo·∫°i h√†nh ƒë·ªông kh√°c nhau:**\n";
        actionTypes.slice(0, 3).forEach(type => {
            context += `‚Ä¢ ${type}\n`;
        });
        
        // Location-specific suggestions
        if (currentLocation) {
            context += `\n**Khai th√°c ƒë·ªãa ƒëi·ªÉm "${currentLocation}":**\n`;
            context += `‚Ä¢ T·∫°o l·ª±a ch·ªçn ph√π h·ª£p v·ªõi ƒë·∫∑c ƒëi·ªÉm v√† c∆° h·ªôi c·ªßa ƒë·ªãa ƒëi·ªÉm n√†y\n`;
        }
        
        // Skill utilization
        if (pc?.learnedSkills && pc.learnedSkills.length > 0) {
            context += `\n**S·ª≠ d·ª•ng k·ªπ nƒÉng c√≥ s·∫µn:**\n`;
            const skills = pc.learnedSkills.slice(0, 3);
            skills.forEach(skillName => {
                // Normalize the skill name to find the actual skill entity
                const normalizedSkillName = normalizeName(skillName);
                const skillEntity = Object.values(gameState.knownEntities).find((e: any) => 
                    e.type === 'skill' && normalizeName(e.name) === normalizedSkillName
                );
                if (skillEntity && skillEntity.mastery) {
                    context += `‚Ä¢ T·∫°o c∆° h·ªôi s·ª≠ d·ª•ng "${skillEntity.name} (${skillEntity.mastery})"\n`;
                } else {
                    context += `‚Ä¢ T·∫°o c∆° h·ªôi s·ª≠ d·ª•ng "${skillName}"\n`;
                }
            });
        }
        
        // Companion interaction suggestions
        const companions = gameState.party?.filter(p => p.type === 'companion') || [];
        if (companions.length > 0) {
            context += `\n**T∆∞∆°ng t√°c v·ªõi ƒë·ªìng h√†nh:**\n`;
            companions.slice(0, 2).forEach(companion => {
                context += `‚Ä¢ L·ª±a ch·ªçn ph·ªëi h·ª£p ho·∫∑c giao ti·∫øp v·ªõi ${companion.name}\n`;
            });
        }
        
        // Time and duration variety
        context += `\n**ƒêa d·∫°ng th·ªùi gian th·ª±c hi·ªán:**\n`;
        context += `‚Ä¢ T·∫°o l·ª±a ch·ªçn ng·∫Øn h·∫°n (15-30 ph√∫t), trung h·∫°n (1-2 gi·ªù), v√† d√†i h·∫°n (n·ª≠a ng√†y)\n`;
        context += `‚Ä¢ C√¢n b·∫±ng gi·ªØa h√†nh ƒë·ªông nhanh v√† ho·∫°t ƒë·ªông suy t∆∞\n`;
        
        context += `\n**L∆ØU √ù QUAN TR·ªåNG**: M·ªói l·ª±a ch·ªçn ph·∫£i:\n`;
        context += `‚Ä¢ D·∫™N ƒê·∫æN K·∫æT QU·∫¢ KH√ÅC NHAU ho√†n to√†n\n`;
        context += `‚Ä¢ T·∫°o ra c√°c t√¨nh hu·ªëng m·ªõi th√∫ v·ªã v√† kh√¥ng d·ª± ƒëo√°n tr∆∞·ªõc\n`;
        context += `‚Ä¢ Ph·∫£n √°nh t√≠nh c√°ch v√† ƒë·ªông c∆° c·ªßa nh√¢n v·∫≠t\n`;
        context += `‚Ä¢ C√≥ t√≠nh logic v√† h·ª£p l√Ω trong b·ªëi c·∫£nh hi·ªán t·∫°i\n`;
        
        return context;
    }
    
    // ADVANCED COT: Comprehensive Chain of Thought reasoning based on sillytarven framework
    private buildAdvancedCOTPrompt(action: string, gameState: SaveData): string {
        const pc = gameState.party?.find(p => p.type === 'pc');
        const companions = gameState.party?.filter(p => p.type === 'companion') || [];
        const recentHistory = gameState.gameHistory.slice(-4); // Last 2 turns (user+model pairs)
        
        console.log(`üß† COT: Building advanced COT prompt for turn ${gameState.turnCount}:`, {
            pcName: pc?.name || 'Unknown',
            companionCount: companions.length,
            historyEntries: recentHistory.length,
            actionType: this.categorizeAction(action)
        });
        
        const cotPrompt = `
üß† TR∆Ø·ªöC KHI T·∫†O JSON RESPONSE - B·∫ÆT BU·ªòC PH·∫¢I SUY NGHƒ®:

üéØ **FORMAT B·∫ÆT BU·ªòC**: Bao g·ªìm "cot_reasoning" field trong JSON v·ªõi suy nghƒ© chi ti·∫øt!

‚ö†Ô∏è **QUAN TR·ªåNG - GI·ªöI H·∫†N ƒê·ªò D√ÄI**: M·ªói b∆∞·ªõc COT ch·ªâ ƒë∆∞·ª£c 15-30 t·ª´. Vi·∫øt ng·∫Øn g·ªçn, s√∫c t√≠ch!

**B·∫ÆNG BU·ªòC**: B·∫°n ph·∫£i bao g·ªìm field "cot_reasoning" ch·ª©a:
**B∆Ø·ªöC M·ªòT: PH√ÇN T√çCH T√åNH HU·ªêNG HI·ªÜN T·∫†I**
H√£y vi·∫øt ra suy nghƒ© c·ªßa b·∫°n v·ªÅ t√¨nh hu·ªëng hi·ªán t·∫°i:

‚ë† **S·ª± ki·ªán g·∫ßn ƒë√¢y**: 
   ${this.extractRecentEvents(recentHistory)}

‚ë° **Th·ªùi gian & ƒê·ªãa ƒëi·ªÉm**:
   - Th·ªùi gian: ${this.formatGameTime(gameState.gameTime)}
   - ƒê·ªãa ƒëi·ªÉm: ${pc?.location || 'Kh√¥ng x√°c ƒë·ªãnh'}

‚ë¢ **Ph√¢n t√≠ch nh√¢n v·∫≠t s√¢u**:
   [NH√ÇN V·∫¨T CH√çNH] ${pc?.name}:
   - T√≠nh c√°ch: ${pc?.personality || 'Ch∆∞a x√°c ƒë·ªãnh'}
   - M·ª•c ti√™u: ${pc?.motivation || 'Ch∆∞a r√µ'}
   - Tr·∫°ng th√°i hi·ªán t·∫°i: ${this.analyzeCharacterState(pc, gameState.statuses)}
   
   ${companions.length > 0 ? companions.map(comp => 
   `[ƒê·ªíNG H√ÄNH] ${comp.name}:
   - Quan h·ªá v·ªõi PC: ${comp.relationship || 'B√¨nh th∆∞·ªùng'}
   - T√≠nh c√°ch: ${comp.personality || 'Ch∆∞a r√µ'}
   - Tr·∫°ng th√°i: ${this.analyzeCharacterState(comp, gameState.statuses)}`).join('\n   ') : '[Kh√¥ng c√≥ ƒë·ªìng h√†nh]'}

‚ë£ **Tr·∫°ng th√°i c∆° th·ªÉ v√† trang ph·ª•c**:
   ${this.analyzePhysicalState(pc, gameState)}

**B∆Ø·ªöC 2: CH·ªêNG √ÅP B·ª®C**
Suy nghƒ© v·ªÅ c√¢n b·∫±ng quy·ªÅn l·ª±c v√† tr√°nh khu√¥n m·∫´u:
- C√¢n b·∫±ng quy·ªÅn l·ª±c: ${this.analyzePowerBalance(gameState)}
- Tr√°nh khu√¥n m·∫´u: ${this.getAntiStereotypeGuidance(gameState)}
- ƒê·∫£m b·∫£o agency: M·ªçi nh√¢n v·∫≠t ph·∫£i c√≥ l·ª±a ch·ªçn c√≥ √Ω nghƒ©a

**B∆Ø·ªöC 3: ƒê·ªÄ C∆Ø∆†NG ƒê√ìNG VAI** 
L√™n k·∫ø ho·∫°ch c·ª• th·ªÉ cho ph·∫£n ·ª©ng v·ªõi h√†nh ƒë·ªông "${action}":
- **Ph·∫£n ·ª©ng tr·ª±c ti·∫øp**: ${this.planDirectResponse(action, gameState)}
- **2-3 di·ªÖn bi·∫øn m·ªõi**: ${this.planStoryProgression(gameState)}  
- **K·∫øt n·ªëi v·ªõi di·ªÖn bi·∫øn tr∆∞·ªõc**: ${this.planContinuity(recentHistory)}

**B∆Ø·ªöC 3A: PH√ÇN T√çCH H√ÄNH ƒê·ªòNG NG∆Ø·ªúI CH∆†I - B·∫ÆT BU·ªòC**
üéØ **ACTION COMPLETION ANALYSIS**:
‚ë† **X√°c ƒë·ªãnh lo·∫°i h√†nh ƒë·ªông**: "${action}"
   - Lo·∫°i: [Di chuy·ªÉn/T∆∞∆°ng t√°c/Chi·∫øn ƒë·∫•u/ƒê·ªëi tho·∫°i/Kh√°m ph√°/Kh√°c]
   - ƒê·ªô ph·ª©c t·∫°p: [ƒê∆°n gi·∫£n/Trung b√¨nh/Ph·ª©c t·∫°p]
‚ë° **KI·ªÇM TRA HO√ÄN TH√ÄNH TRONG L∆Ø·ª¢T N√ÄY**:
   - ‚úÖ **B·∫ÆT BU·ªòC**: H√†nh ƒë·ªông PH·∫¢I ƒë∆∞·ª£c ho√†n th√†nh 100% trong story n√†y
   - üö´ **NGHI√äM C·∫§M**: Kh√¥ng ƒë·ªÉ "ƒëang di chuy·ªÉn...", "s·∫Ω ti·∫øp t·ª•c...", "ch∆∞a ƒë·∫øn n∆°i..."
   - üìç **ƒê·∫∂C BI·ªÜT V·ªöI DI CHUY·ªÇN**: 
     * N·∫øu l√† di chuy·ªÉn ‚Üí PC PH·∫¢I ƒë·∫øn ƒë√≠ch trong l∆∞·ª£t n√†y
     * Ch·ªâ d·ª´ng l·∫°i n·∫øu c√≥ s·ª± ki·ªán/g·∫∑p g·ª°/tr·ªü ng·∫°i B·∫§T NG·ªú x·∫£y ra
     * M√¥ t·∫£ c·∫£ qu√° tr√¨nh di chuy·ªÉn + k·∫øt qu·∫£ ƒë·∫øn n∆°i
‚ë¢ **K·∫æ HO·∫†CH HO√ÄN TH√ÄNH**:
   - ƒêi·ªÉm b·∫Øt ƒë·∫ßu: [M√¥ t·∫£ t√¨nh hu·ªëng kh·ªüi ƒë·∫ßu]
   - Qu√° tr√¨nh th·ª±c hi·ªán: [Chi ti·∫øt di·ªÖn ra nh∆∞ th·∫ø n√†o]  
   - K·∫øt qu·∫£ cu·ªëi c√πng: [Tr·∫°ng th√°i sau khi ho√†n th√†nh]
   - H·∫≠u qu·∫£/ph·∫£n ·ª©ng: [NPC v√† m√¥i tr∆∞·ªùng ph·∫£n ·ª©ng g√¨]

**B∆Ø·ªöC 3B: KI·ªÇM TRA NPC DECISIVENESS & DETECTION (B·∫ÆT BU·ªòC)**
‚ö° **CRITICAL CHECK - NPC BEHAVIOR VALIDATION & DETECTION**:

‚ë† **T·ª∞ ƒê·ªòNG NH·∫¨N DI·ªÜN NPCs**: Ph√¢n t√≠ch story content ƒë·ªÉ t√¨m T·∫§T C·∫¢ NPCs s·∫Ω xu·∫•t hi·ªán
   - X√°c ƒë·ªãnh m·ªçi nh√¢n v·∫≠t (kh√¥ng ph·∫£i player) c√≥ trong b·ªëi c·∫£nh hi·ªán t·∫°i
   - Ch·ªâ l·∫•y NPCs ƒëang HI·ªÜN DI·ªÜN, kh√¥ng ph·∫£i ch·ªâ ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn
   - ∆Ø·ªõc ƒëo√°n th√¥ng tin c∆° b·∫£n: t√™n, gi·ªõi t√≠nh, tu·ªïi, ngo·∫°i h√¨nh, m·ªëi quan h·ªá v·ªõi player

‚ë° **CHO M·ªñI NPC - PLAN IMMEDIATE ACTION + INNER THOUGHTS**: 
   - NPC s·∫Ω l√†m G√å ngay l∆∞·ª£t n√†y (c·ª• th·ªÉ, r√µ r√†ng)
   - NPC s·∫Ω N√ìI G√å (n·∫øu c√≥ ƒë·ªëi tho·∫°i)
   - NPC s·∫Ω PH·∫¢N ·ª®NG th·∫ø n√†o v·ªõi PC
   - **N·ªòI T√ÇM NPC**: Suy nghƒ© b√™n trong c·ªßa NPC v·ªÅ h√†nh ƒë·ªông player (15-25 t·ª´, c·∫£m x√∫c ch√¢n th·∫≠t)

‚ë¢ **üö´ ƒê·∫¢M B·∫¢O TUY·ªÜT ƒê·ªêI**: 
   - KH√îNG c√≥ NPC n√†o "suy nghƒ©", "c√¢n nh·∫Øc", "s·∫Ω quy·∫øt ƒë·ªãnh sau"
   - KH√îNG c√≥ NPC n√†o do d·ª± hay tr√¨ ho√£n h√†nh ƒë·ªông
   - M·ªåI NPC ph·∫£i c√≥ h√†nh ƒë·ªông/ph·∫£n ·ª©ng ho√†n th√†nh trong l∆∞·ª£t n√†y
   - N·ªòI T√ÇM NPC ph·∫£i ph√π h·ª£p v·ªõi t√≠nh c√°ch v√† b·ªëi c·∫£nh

‚ë£ **üóëÔ∏è LO·∫†I B·ªé NPCs KH√îNG HO·∫†T ƒê·ªòNG**: 
   - **QUY T·∫ÆC 3 L∆Ø·ª¢T**: NPCs kh√¥ng c√≥ ƒë·ªëi tho·∫°i ho·∫∑c h√†nh ƒë·ªông trong 3 l∆∞·ª£t li√™n ti·∫øp s·∫Ω b·ªã lo·∫°i kh·ªèi danh s√°ch
   - **KI·ªÇM TRA**: Ph√¢n t√≠ch l·ªãch s·ª≠ 3 l∆∞·ª£t g·∫ßn nh·∫•t, n·∫øu NPC ch·ªâ xu·∫•t hi·ªán th·ª• ƒë·ªông (ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn) m√† kh√¥ng t∆∞∆°ng t√°c ‚Üí LO·∫†I B·ªé
   - **NGO·∫†I L·ªÜ**: Gi·ªØ l·∫°i NPCs quan tr·ªçng cho c·ªët truy·ªán ho·∫∑c ƒëang trong cu·ªôc tr√≤ chuy·ªán/t∆∞∆°ng t√°c tr·ª±c ti·∫øp v·ªõi player
   - **X√ÅC NH·∫¨N**: Trong COT reasoning, li·ªát k√™ NPCs b·ªã lo·∫°i v√† l√Ω do c·ª• th·ªÉ
‚ë§ **STORY LENGTH PLANNING - B·∫ÆT BU·ªòC**: 
   - **TARGET**: C√¢u chuy·ªán PH·∫¢I ƒë·∫°t 400-500 t·ª´ ti·∫øng Vi·ªát
   - **C·∫§U TR√öC B·∫ÆT BU·ªòC**: 3-4 ƒëo·∫°n vƒÉn, m·ªói ƒëo·∫°n 100-150 t·ª´
   - **K·∫æ HO·∫†CH CHI TI·∫æT**: 
     * ƒêo·∫°n 1: [M√¥ t·∫£ c·∫£nh/t√¨nh hu·ªëng + h√†nh ƒë·ªông NPC] ~120 t·ª´
     * ƒêo·∫°n 2: [ƒê·ªëi tho·∫°i + ph·∫£n ·ª©ng c·∫£m x√∫c] ~130 t·ª´  
     * ƒêo·∫°n 3: [Di·ªÖn bi·∫øn ch√≠nh + t∆∞∆°ng t√°c] ~120 t·ª´
     * ƒêo·∫°n 4: [K·∫øt th√∫c scene + setup cho choices] ~100 t·ª´
   - **C√îNG TH·ª®C M·ªû R·ªòNG**: Th√™m chi ti·∫øt m√¥i tr∆∞·ªùng, c·∫£m x√∫c nh√¢n v·∫≠t, mi√™u t·∫£ h√†nh ƒë·ªông c·ª• th·ªÉ

**B∆Ø·ªöC 4: CH·ªêNG L∆Ø·ªúI VƒÇNG & KHU√îN S√ÅO**
T·ª± ki·ªÉm tra ƒë·ªÉ tr√°nh n·ªôi dung nh√†m ch√°n:
‚ë† **Tr√°nh ph·∫£n ·ª©ng template** - KH√îNG d√πng c·ª•m t·ª´ s√°o m√≤n
‚ë° **ƒê·∫£m b·∫£o ƒë·ªëi tho·∫°i t·ª± nhi√™n** - Ph√π h·ª£p b·ªëi c·∫£nh v√† c·∫£m x√∫c

**B∆Ø·ªöC 4B: THI·∫æT K·∫æ L·ª∞A CH·ªåN THEO Y√äU C·∫¶U**
Ph√¢n t√≠ch v√† t·∫°o l·ª±a ch·ªçn tu√¢n th·ªß strict requirements:
‚ë† **ƒêa d·∫°ng th·ªÉ lo·∫°i (7-9 l·ª±a ch·ªçn)**: h√†nh ƒë·ªông, x√£ h·ªôi, thƒÉm d√≤, chi·∫øn ƒë·∫•u, tua nhanh th·ªùi gian, chuy·ªÉn c·∫£nh, nsfw(n·∫øu enabled)
‚ë° **T·∫≠n d·ª•ng assets**: ki·ªÉm tra k·ªπ nƒÉng + v·∫≠t ph·∫©m c·ªßa PC, t·∫°o l·ª±a ch·ªçn s·ª≠ d·ª•ng ch√∫ng
‚ë¢ **Th√∫c ƒë·∫©y c·ªët truy·ªán**: m·ªói choice ph·∫£i c√≥ potential thay ƒë·ªïi m·ªëi quan h·ªá/b·ªëi c·∫£nh/th·ªùi gian
‚ë£ **Character consistency**: l·ª±a ch·ªçn ph√π h·ª£p t√≠nh c√°ch PC (tr·ª´ l·ª±a ch·ªçn chi·∫øn ƒë·∫•u)
‚ë§ **Information limitation**: ch·ªâ d√πng th√¥ng tin PC bi·∫øt, t·ªëi ƒëa 30 t·ª´/choice
‚ë• **Avoiding commands**: kh√¥ng d√πng gi·ªçng ƒëi·ªáu m·ªánh l·ªánh
‚ë¶ **Category labeling**: hi·ªÉn th·ªã r√µ th·ªÉ lo·∫°i [H√†nh ƒê·ªông], [X√£ H·ªôi], etc.

**B∆Ø·ªöC 5: KI·ªÇM TRA CU·ªêI**
T·ª± h·ªèi b·∫£n th√¢n:
- C√≥ k·∫øt n·ªëi t·ª± nhi√™n v·ªõi di·ªÖn bi·∫øn tr∆∞·ªõc kh√¥ng?
- C√≥ tr√°nh ƒë∆∞·ª£c l·∫∑p l·∫°i pattern c≈© kh√¥ng?  
- Story c√≥ th√∫c ƒë·∫©y ph√°t tri·ªÉn nh√¢n v·∫≠t/m·ªëi quan h·ªá kh√¥ng?
- Choices c√≥ ƒë·ªß ƒëa d·∫°ng v√† th√∫ v·ªã kh√¥ng?
- **üéØ NPC FINAL VALIDATION**: T·∫•t c·∫£ NPCs ƒë√£ ƒë∆∞·ª£c plan h√†nh ƒë·ªông c·ª• th·ªÉ ch∆∞a?
- **üìè WORD COUNT FINAL - NGHI√äM KH·∫ÆC**: 
  * ƒê·∫øm t·ª´ c·ª• th·ªÉ trong c√¢u chuy·ªán ƒë√£ vi·∫øt
  * N·∫æU D∆Ø·ªöI 400 t·ª´: PH·∫¢I th√™m chi ti·∫øt m√¥i tr∆∞·ªùng, c·∫£m x√∫c, mi√™u t·∫£ h√†nh ƒë·ªông
  * N·∫æU TR√äN 500 t·ª´: R√∫t g·ªçn m·ªôt ch√∫t nh∆∞ng gi·ªØ n·ªôi dung ch√≠nh
  * KI·ªÇM TRA L·∫†I: ƒê·∫£m b·∫£o 400-500 t·ª´ ch√≠nh x√°c

**QUAN TR·ªåNG V·ªÄ NPCs_PRESENT**: 
- PH·∫¢I ƒëi·ªÅn ƒë·∫ßy ƒë·ªß T·∫§T C·∫¢ c√°c field cho m·ªói NPC: name, gender, age, appearance, description, relationship, inner_thoughts
- KH√îNG ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng ho·∫∑c "Kh√¥ng r√µ" tr·ª´ khi th·ª±c s·ª± kh√¥ng th·ªÉ x√°c ƒë·ªãnh
- M√¥ t·∫£ appearance v√† description ph·∫£i chi ti·∫øt (√≠t nh·∫•t 10-15 t·ª´ m·ªói field)
- Inner thoughts ph·∫£i ph·∫£n √°nh t√¢m tr·∫°ng NPC trong t√¨nh hu·ªëng c·ª• th·ªÉ n√†y

**CU·ªêI C√ôNG**: T·∫°o JSON response v·ªõi t·∫•t c·∫£ suy nghƒ© tr√™n trong field "cot_reasoning":

{
  "cot_reasoning": "B∆Ø·ªöC M·ªòT: [Ph√¢n t√≠ch t√¨nh hu·ªëng]. B∆Ø·ªöC HAI: [C√¢n b·∫±ng quy·ªÅn l·ª±c]. B∆Ø·ªöC BA: [K·∫ø ho·∫°ch]. B∆Ø·ªöC 3A: [H√†nh ƒë·ªông lo·∫°i X, ho√†n th√†nh 100%]. B∆Ø·ªöC 3B: [NPCs l√†m g√¨ + n·ªôi t√¢m. Lo·∫°i b·ªè NPCs kh√¥ng ho·∫°t ƒë·ªông]. B∆Ø·ªöC B·ªêN: [S√°ng t·∫°o]. B∆Ø·ªöC 4B: [7-9 choices ƒëa d·∫°ng]. B∆Ø·ªöC NƒÇM: [Ki·ªÉm tra. Story X t·ª´, c·∫ßn th√™m chi ti·∫øt]",
  "story": "...",
  "npcs_present": [
    {
      "name": "T√™n ƒë·∫ßy ƒë·ªß c·ªßa NPC (B·∫ÆT BU·ªòC - kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng)",
      "gender": "Nam/N·ªØ/Kh√¥ng r√µ (B·∫ÆT BU·ªòC - ph·∫£i c√≥ gi√° tr·ªã c·ª• th·ªÉ)",
      "age": "Tu·ªïi c·ª• th·ªÉ (VD: '25 tu·ªïi', 'Trung ni√™n', 'Gi√†') - KH√îNG ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      "appearance": "M√¥ t·∫£ ngo·∫°i h√¨nh chi ti·∫øt (√≠t nh·∫•t 10-15 t·ª´) - B·∫ÆT BU·ªòC ƒëi·ªÅn",
      "description": "M√¥ t·∫£ chi ti·∫øt v·ªÅ NPC, vai tr√≤, t√≠nh c√°ch (√≠t nh·∫•t 15-20 t·ª´) - B·∫ÆT BU·ªòC",
      "relationship": "B·∫°n b√®/Trung l·∫≠p/ƒê·ªìng minh/Th√π ƒë·ªãch/T√¨nh y√™u/Gia ƒë√¨nh/Ch∆∞a r√µ - B·∫ÆT BU·ªòC ch·ªçn 1 (b·∫±ng ti·∫øng Vi·ªát)",
      "inner_thoughts": "N·ªôi t√¢m NPC v·ªÅ t√¨nh hu·ªëng hi·ªán t·∫°i (15-25 t·ª´) - B·∫ÆT BU·ªòC c√≥ n·ªôi dung"
    }
  ],
  "choices": [...]
}

üö® QUAN TR·ªåNG - ƒê·ªåC K·ª∏ TR∆Ø·ªöC KHI TR·∫¢ L·ªúI üö®

**B·∫ÆT BU·ªòC TU√ÇN TH·ª¶**: JSON response PH·∫¢I c√≥ field "cot_reasoning" v·ªõi suy nghƒ© chi ti·∫øt!

**FORMAT C·ª§ TH·ªÇ - B·∫ÆT BU·ªòC THEO ƒê√öNG**:

{
  "cot_reasoning": "B∆Ø·ªöC M·ªòT: T√¨nh hu·ªëng hi·ªán t·∫°i l√† [X]. B∆Ø·ªöC HAI: C√¢n b·∫±ng quy·ªÅn l·ª±c c·∫ßn ch√∫ √Ω [Y]. B∆Ø·ªöC BA: K·∫ø ho·∫°ch l√† [Z]. B∆Ø·ªöC 3A: H√†nh ƒë·ªông '[action]' lo·∫°i [di chuy·ªÉn/t∆∞∆°ng t√°c], ho√†n th√†nh 100% l∆∞·ª£t n√†y. B∆Ø·ªöC 3B: NPCs: [NPC1] l√†m [h√†nh ƒë·ªông], n·ªôi t√¢m '[c·∫£m x√∫c]'. Lo·∫°i b·ªè [NPC X] v√¨ kh√¥ng ho·∫°t ƒë·ªông 3 l∆∞·ª£t. B∆Ø·ªöC B·ªêN: Tr√°nh nh√†m ch√°n b·∫±ng [ph∆∞∆°ng ph√°p]. B∆Ø·ªöC 4B: T·∫°o 7-9 choices ƒëa d·∫°ng [combat/social/exploration]. B∆Ø·ªöC NƒÇM: Story kho·∫£ng [X] t·ª´, c·∫ßn th√™m [chi ti·∫øt] ƒë·ªÉ ƒë·∫°t 400-500 t·ª´.",
  "story": "...",
  "npcs_present": [
    {
      "name": "T√™n ƒë·∫ßy ƒë·ªß c·ªßa NPC (B·∫ÆT BU·ªòC - kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng)", 
      "gender": "Nam/N·ªØ/Kh√¥ng r√µ (B·∫ÆT BU·ªòC - ph·∫£i c√≥ gi√° tr·ªã c·ª• th·ªÉ)",
      "age": "Tu·ªïi c·ª• th·ªÉ (VD: '25 tu·ªïi', 'Trung ni√™n', 'Gi√†') - KH√îNG ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      "appearance": "M√¥ t·∫£ ngo·∫°i h√¨nh chi ti·∫øt (√≠t nh·∫•t 10-15 t·ª´) - B·∫ÆT BU·ªòC ƒëi·ªÅn", 
      "description": "M√¥ t·∫£ chi ti·∫øt v·ªÅ NPC, vai tr√≤, t√≠nh c√°ch (√≠t nh·∫•t 15-20 t·ª´) - B·∫ÆT BU·ªòC",
      "relationship": "B·∫°n b√®/Trung l·∫≠p/ƒê·ªìng minh/Th√π ƒë·ªãch/T√¨nh y√™u/Gia ƒë√¨nh/Ch∆∞a r√µ - B·∫ÆT BU·ªòC ch·ªçn 1 (b·∫±ng ti·∫øng Vi·ªát)",
      "inner_thoughts": "N·ªôi t√¢m NPC v·ªÅ t√¨nh hu·ªëng hi·ªán t·∫°i (15-25 t·ª´) - B·∫ÆT BU·ªòC c√≥ n·ªôi dung"
    }
  ],
  "choices": [...]
}

‚ùå SAI: Kh√¥ng c√≥ field "cot_reasoning"
‚úÖ ƒê√öNG: C√≥ field "cot_reasoning" v·ªõi suy nghƒ© ƒë·∫ßy ƒë·ªß

**L·∫¶N N√ÄY PH·∫¢I THEO FORMAT TR√äN - M·ªñI B∆Ø·ªöC COT CH·ªà 15-30 T·ª™ - KH√îNG C√ì L·ª∞A CH·ªåN KH√ÅC!**
`;
        
        console.log(`‚úÖ COT: Advanced COT prompt completed`, {
            totalLength: cotPrompt.length,
            estimatedTokens: this.estimateTokens(cotPrompt),
            sections: ['Situation Analysis', 'Anti-Oppression', 'Role-Playing Outline', 'Anti-Clich√©', 'Final Check'],
            ready: true
        });
        
        return cotPrompt;
    }
    
    // Helper methods for COT analysis
    private extractRecentEvents(history: GameHistoryEntry[]): string {
        if (history.length === 0) return "Ch∆∞a c√≥ s·ª± ki·ªán g·∫ßn ƒë√¢y";
        
        const recentEvents = [];
        let processedEntries = 0;
        
        for (let i = history.length - 2; i < history.length; i++) {
            if (i >= 0 && history[i]) {
                const entry = history[i];
                if (entry.role === 'user') {
                    const action = entry.parts[0].text.replace('ACTION: ', '');
                    recentEvents.push(`H√†nh ƒë·ªông: ${action}`);
                    processedEntries++;
                } else if (entry.role === 'model') {
                    try {
                        const parsed = JSON.parse(entry.parts[0].text);
                        if (parsed.story) {
                            const summary = this.extractStoryContinuity(parsed.story);
                            if (summary) {
                                recentEvents.push(`K·∫øt qu·∫£: ${summary}`);
                                processedEntries++;
                            }
                        }
                    } catch (e) {
                        console.log(`üîç COT: Could not parse model response for recent events extraction`);
                    }
                }
            }
        }
        
        const result = recentEvents.join(' ‚Üí ') || "B·∫Øt ƒë·∫ßu phi√™u l∆∞u";
        console.log(`üìã COT: Extracted recent events from ${processedEntries} entries:`, result.substring(0, 100) + (result.length > 100 ? '...' : ''));
        return result;
    }
    
    private analyzeCharacterState(character: any, statuses: any[]): string {
        if (!character) return "Kh√¥ng x√°c ƒë·ªãnh";
        
        const details = [];
        if (character.realm) details.push(`C·∫£nh gi·ªõi: ${character.realm}`);
        
        const charStatuses = statuses.filter(s => s.owner === character.name);
        if (charStatuses.length > 0) {
            details.push(`Tr·∫°ng th√°i: ${charStatuses.map(s => s.name).join(', ')}`);
        }
        
        return details.join(', ') || "B√¨nh th∆∞·ªùng";
    }
    
    private analyzePhysicalState(pc: any, gameState: SaveData): string {
        if (!pc) return "Kh√¥ng x√°c ƒë·ªãnh";
        
        const details = [];
        if (pc.appearance) details.push(`Ngo·∫°i h√¨nh: ${pc.appearance}`);
        
        // Analyze based on recent events for physical state
        const recentHistory = gameState.gameHistory.slice(-2);
        let physicalState = "T·ªânh t√°o, kh·ªèe m·∫°nh";
        
        for (const entry of recentHistory) {
            if (entry.role === 'model') {
                try {
                    const parsed = JSON.parse(entry.parts[0].text);
                    if (parsed.story && /m·ªát|th∆∞∆°ng|ƒëau|ki·ªát s·ª©c/.test(parsed.story)) {
                        physicalState = "C√≥ d·∫•u hi·ªáu m·ªát m·ªèi ho·∫∑c cƒÉng th·∫≥ng";
                        break;
                    }
                } catch (e) {
                    continue;
                }
            }
        }
        
        details.push(`Tr·∫°ng th√°i: ${physicalState}`);
        return details.join(', ');
    }
    
    private analyzePowerBalance(gameState: SaveData): string {
        const pc = gameState.party?.find(p => p.type === 'pc');
        const companions = gameState.party?.filter(p => p.type === 'companion') || [];
        
        if (companions.length === 0) return "Kh√¥ng c√≥ v·∫•n ƒë·ªÅ c√¢n b·∫±ng quy·ªÅn l·ª±c";
        
        // Analyze power dynamics
        const powerImbalances = [];
        companions.forEach(comp => {
            if (comp.realm === pc?.realm) {
                powerImbalances.push(`${comp.name} c√πng c·∫•p v·ªõi PC - t·∫°o s·ª± c√¢n b·∫±ng`);
            } else {
                powerImbalances.push(`${comp.name} - ƒë·∫£m b·∫£o c√≥ ti·∫øng n√≥i ri√™ng`);
            }
        });
        
        return powerImbalances.join(', ') || "C·∫ßn ch√∫ √Ω c√¢n b·∫±ng";
    }
    
    private getAntiStereotypeGuidance(gameState: SaveData): string {
        return "Tr√°nh nh√¢n v·∫≠t ph·∫≥ng, m·ªói NPC c√≥ ƒë·ªông c∆° v√† ph·∫£n ·ª©ng ri√™ng bi·ªát";
    }
    
    private planDirectResponse(action: string, gameState: SaveData): string {
        const actionType = this.categorizeAction(action);
        return `Ph·∫£n ·ª©ng ${actionType} ph√π h·ª£p v·ªõi t√¨nh hu·ªëng v√† nh√¢n v·∫≠t`;
    }
    
    private planStoryProgression(gameState: SaveData): string {
        const suggestions = [
            "Gi·ªõi thi·ªáu y·∫øu t·ªë m·ªõi ho·∫∑c NPC",
            "Ph√°t tri·ªÉn m·ªëi quan h·ªá hi·ªán c√≥",
            "T·∫°o c∆° h·ªôi s·ª≠ d·ª•ng k·ªπ nƒÉng",
            "ƒê·∫∑t ra th·ª≠ th√°ch nh·ªè",
            "Ti·∫øt l·ªô th√¥ng tin th√∫ v·ªã"
        ];
        
        return suggestions.slice(0, 2).join(', ');
    }
    
    private planContinuity(recentHistory: GameHistoryEntry[]): string {
        if (recentHistory.length === 0) return "B·∫Øt ƒë·∫ßu m·ªõi";
        
        return "N·ªëi ti·∫øp t·ª± nhi√™n t·ª´ di·ªÖn bi·∫øn v·ª´a r·ªìi, kh√¥ng nh·∫£y c√≥c";
    }
    
    private categorizeAction(action: string): string {
        const lower = action.toLowerCase();
        if (/n√≥i|h·ªèi|tr√≤ chuy·ªán/.test(lower)) return "giao ti·∫øp";
        if (/t·∫•n c√¥ng|ƒë√°nh|chi·∫øn ƒë·∫•u/.test(lower)) return "chi·∫øn ƒë·∫•u";
        if (/ƒëi|di chuy·ªÉn|t·ªõi/.test(lower)) return "di chuy·ªÉn";
        if (/quan s√°t|nh√¨n|xem/.test(lower)) return "quan s√°t";
        return "h√†nh ƒë·ªông";
    }

    // ENHANCED: Special handling for party members with detailed context
    private formatEntityWithContext(
        entity: Entity,
        statuses: Status[],
        reasons: string[],
        maxTokens: number,
        gameState: SaveData
    ): string {
        let text = `‚Ä¢ ${entity.name} (${entity.type})`;
        
        const details: string[] = [];
        
        // Enhanced party member context
        if (entity.type === 'companion') {
            text += ` [ƒê·ªíNG H√ÄNH]`;
            
            // Core personality and motivation for companions
            if (entity.personality) details.push(`T√≠nh c√°ch: ${entity.personality}`);
            if (entity.personalityMbti && MBTI_PERSONALITIES[entity.personalityMbti]) {
                details.push(`MBTI: ${entity.personalityMbti} (${MBTI_PERSONALITIES[entity.personalityMbti].title})`);
            }
            if (entity.motivation) details.push(`ƒê·ªông c∆°: ${entity.motivation}`);
            
            // Relationship with PC (critical for party dynamics)
            if (entity.relationship) {
                details.push(`Quan h·ªá v·ªõi PC: ${entity.relationship}`);
            }
            
            // Skills and abilities (important for party coordination)
            if (entity.skills?.length) {
                const skillsArray = Array.isArray(entity.skills) ? entity.skills : entity.skills.split(',').map(s => s.trim());
                details.push(`K·ªπ nƒÉng: ${skillsArray.slice(0, 4).join(', ')}`);
            }
            
            // Power level for tactical decisions
            if (entity.realm) details.push(`C·∫£nh gi·ªõi: ${entity.realm}`);
            
        } else if (entity.type === 'pc') {
            // Player Character - EMPHASIZE MOTIVATION
            text += ` [NH√ÇN V·∫¨T CH√çNH]`;
            if (entity.motivation) details.push(`**M·ª§C TI√äU QUAN TR·ªåNG**: ${entity.motivation}`);
            if (entity.learnedSkills && entity.learnedSkills.length > 0) {
                const skillsWithMastery = entity.learnedSkills.map(skillName => {
                    // Normalize the skill name to find the actual skill entity
                    const normalizedSkillName = normalizeName(skillName);
                    const skillEntity = Object.values(gameState.knownEntities).find((e: any) => 
                        e.type === 'skill' && normalizeName(e.name) === normalizedSkillName
                    );
                    if (skillEntity && skillEntity.mastery) {
                        return `${skillEntity.name} (${skillEntity.mastery})`;
                    }
                    return skillName;
                });
                details.push(`K·ªπ nƒÉng: ${skillsWithMastery.join(', ')}`);
            }
            if (entity.personality) details.push(`T√≠nh c√°ch: ${entity.personality}`);
            if (entity.personalityMbti) details.push(`MBTI: ${entity.personalityMbti}`);
        } else if (entity.type === 'npc') {
            // Standard NPC context (reduced for non-party members)
            if (entity.personality) details.push(`T√≠nh c√°ch: ${entity.personality}`);
            if (entity.personalityMbti) details.push(`MBTI: ${entity.personalityMbti}`);
            if (entity.motivation) details.push(`ƒê·ªông c∆°: ${entity.motivation}`);
            if (entity.skills?.length) {
                // Handle both string and array formats for skills
                const skillsArray = Array.isArray(entity.skills) ? entity.skills : entity.skills.split(',').map(s => s.trim());
                const skillsText = `K·ªπ nƒÉng: ${skillsArray.slice(0, 3).join(', ')}`;
                details.push(skillsText);
                console.log(`üéØ Prompt Builder - NPC "${entity.name}" skills in prompt:`, skillsText);
            } else {
                console.log(`üéØ Prompt Builder - NPC "${entity.name}" has no skills (entity.skills:`, entity.skills, ')');
            }
        }
        
        if (entity.location) details.push(`V·ªã tr√≠: ${entity.location}`);
        if (entity.realm && entity.type !== 'companion') details.push(`C·∫£nh gi·ªõi: ${entity.realm}`);
        
        // Enhanced status effects for party members
        const entityStatuses = statuses.filter(s => s.owner === entity.name);
        if (entityStatuses.length > 0) {
            if (entity.type === 'companion') {
                // More detailed status for companions
                details.push(`Tr·∫°ng th√°i: ${entityStatuses.map(s => `${s.name} (${s.type})`).slice(0, 3).join(', ')}`);
            } else {
                details.push(`Tr·∫°ng th√°i: ${entityStatuses.map(s => s.name).slice(0, 2).join(', ')}`);
            }
        }
        
        // Description with priority for companions
        if (entity.description) {
            const remainingTokens = Math.max(0, maxTokens - this.estimateTokens(text + details.join('; ')));
            const threshold = entity.type === 'companion' ? 50 : 30; // Higher threshold for companions
            
            if (remainingTokens > threshold) {
                const truncatedDesc = this.aggressiveTruncation(entity.description, remainingTokens);
                details.push(`M√¥ t·∫£: ${truncatedDesc}`);
            }
        }
        
        return text + "\n  " + details.join("\n  ");
    }

    private formatEntityBrief(entity: Entity, reasons: string[], maxTokens: number): string {
        const base = `‚Ä¢ ${entity.name} (${entity.type})`;
        const reasonText = reasons.length > 0 ? ` [${reasons[0]}]` : '';
        const description = entity.description ? ` - ${entity.description}` : '';
        
        const fullText = base + reasonText + description;
        return this.aggressiveTruncation(fullText, maxTokens);
    }

    private buildQuestContext(quests: Quest[], maxTokens: number): string {
        if (quests.length === 0) return '';
        
        let context = "**Nhi·ªám v·ª• ƒëang ho·∫°t ƒë·ªông:**\n";
        let usedTokens = this.estimateTokens(context);
        
        quests.forEach(quest => {
            const activeObjectives = quest.objectives.filter(o => !o.completed);
            const questText = `- ${quest.title}: ${activeObjectives.map(o => o.description).join(', ')}\n`;
            const questTokens = this.estimateTokens(questText);
            
            if (usedTokens + questTokens <= maxTokens) {
                context += questText;
                usedTokens += questTokens;
            }
        });
        
        return context + "\n";
    }

    // ENHANCED: Comprehensive history context for better story continuity with compressed data
    private buildSmartHistoryContext(history: GameHistoryEntry[], maxTokens: number): string {
        let context = "**DI·ªÑN BI·∫æN V√Ä QUY·∫æT ƒê·ªäNH G·∫¶N ƒê√ÇY:**\n";
        let usedTokens = this.estimateTokens(context);
        
        const storyEvents: string[] = [];
        const userActions: string[] = [];
        
        // NEW: Include story flow from compressed history for continuity
        const gameState = this.currentGameState;
        if (gameState?.compressedHistory?.length > 0) {
            const recentCompressed = gameState.compressedHistory.slice(-1); // Most recent segment
            recentCompressed.forEach(segment => {
                if (segment.storyFlow && segment.storyFlow.length > 0) {
                    context += `**NG·ªÆ C·∫¢NH T·ª™ L·ªäCH S·ª¨ N√âN (${segment.turnRange}):**\n`;
                    segment.storyFlow.forEach(flow => {
                        context += `‚Ä¢ ${flow}\n`;
                        usedTokens += this.estimateTokens(flow) + 5;
                    });
                    context += "\n";
                }
            });
        }
        
        // IMPROVED: Include last 6 pairs (user + model) instead of 4
        const lookback = Math.min(6, Math.floor(history.length / 2));
        
        // Process both user actions AND AI responses for full context
        for (let i = history.length - lookback * 2; i < history.length; i++) {
            const entry = history[i];
            
            if (entry.role === 'user') {
                // Extract user action for context
                const actionText = entry.parts[0].text;
                if (actionText.startsWith('ACTION:')) {
                    const cleanAction = actionText.replace('ACTION: ', '').trim();
                    userActions.push(`[H√†nh ƒë·ªông] ${cleanAction}`);
                }
            } else if (entry.role === 'model') {
                // Extract story continuity from AI response
                try {
                    const parsed = JSON.parse(entry.parts[0].text);
                    if (parsed.story) {
                        const storySegment = this.extractStoryContinuity(parsed.story);
                        if (storySegment) {
                            storyEvents.push(`[K·∫øt qu·∫£] ${storySegment}`);
                        }
                    }
                    
                    // Extract important state changes
                    const stateChanges = this.extractStateChanges(parsed);
                    if (stateChanges) {
                        storyEvents.push(`[Thay ƒë·ªïi] ${stateChanges}`);
                    }
                } catch (e) {
                    // Skip malformed responses
                }
            }
        }
        
        // Build comprehensive context alternating actions and results
        const combined = [];
        for (let i = 0; i < Math.max(userActions.length, storyEvents.length); i++) {
            if (userActions[i]) combined.push(userActions[i]);
            if (storyEvents[i]) combined.push(storyEvents[i]);
        }
        
        // Add events with better token management
        combined.slice(-8).forEach(event => { // Last 8 events (4 pairs)
            const eventTokens = this.estimateTokens(event + '\n');
            if (usedTokens + eventTokens <= maxTokens) {
                context += event + '\n';
                usedTokens += eventTokens;
            }
        });
        
        context += "\n**TI·∫æP T·ª§C M·∫†CH TRUY·ªÜN**: ƒê·∫£m b·∫£o c√¢u chuy·ªán ch·∫£y t·ª± nhi√™n t·ª´ di·ªÖn bi·∫øn tr√™n!\n";
        return context;
    }

    private summarizeStory(story: string): string {
        // Extract key information from story
        // This is simplified - could use more sophisticated NLP
        const sentences = story.split(/[.!?]+/).filter(s => s.trim().length > 10);
        
        // Look for sentences with important keywords
        const importantKeywords = /chi·∫øn ƒë·∫•u|gi·∫øt|ch·∫øt|nh·∫≠n ƒë∆∞·ª£c|m·∫•t|th√†nh c√¥ng|th·∫•t b·∫°i|ph√°t hi·ªán|g·∫∑p/;
        const importantSentences = sentences.filter(s => importantKeywords.test(s));
        
        if (importantSentences.length > 0) {
            return importantSentences[0].trim() + '.';
        }
        
        return sentences[0]?.trim() + '.' || '';
    }

    // NEW: Extract story continuity from AI responses (key events and context)
    private extractStoryContinuity(story: string): string | null {
        if (!story || story.length < 20) return null;
        
        // T√¨m c√°c c√¢u c√≥ keyword quan tr·ªçng cho story continuity
        const sentences = story.split(/[.!?]+/).filter(s => s.trim().length > 15);
        const continuityKeywords = /ƒë√£|ƒëang|s·∫Ω|v·ª´a|b·∫Øt ƒë·∫ßu|k·∫øt th√∫c|ph√°t hi·ªán|g·∫∑p|n√≥i|quy·∫øt ƒë·ªãnh|c·∫£m th·∫•y|di chuy·ªÉn|t·ªõi|v·ªÅ|r·ªùi/;
        
        // L·∫•y 1-2 c√¢u quan tr·ªçng nh·∫•t
        const importantSentences = sentences
            .filter(s => continuityKeywords.test(s))
            .slice(0, 2)
            .map(s => s.trim());
        
        if (importantSentences.length === 0) {
            // Fallback: l·∫•y c√¢u ƒë·∫ßu v√† cu·ªëi
            const firstSentence = sentences[0]?.trim();
            const lastSentence = sentences[sentences.length - 1]?.trim();
            
            if (firstSentence && firstSentence !== lastSentence) {
                return `${firstSentence}... ${lastSentence}.`;
            }
            return firstSentence ? `${firstSentence}.` : null;
        }
        
        return importantSentences.join('. ') + '.';
    }

    // NEW: Extract important game state changes from AI response
    private extractStateChanges(parsedResponse: any): string | null {
        const changes: string[] = [];
        
        try {
            // Location changes
            if (parsedResponse.location_update) {
                changes.push(`V·ªã tr√≠ ‚Üí ${parsedResponse.location_update.new_location}`);
            }
            
            // Skill learning/updates
            if (parsedResponse.story?.includes('SKILL_LEARNED') || parsedResponse.story?.includes('SKILL_UPDATE')) {
                changes.push('K·ªπ nƒÉng ƒë∆∞·ª£c c·∫≠p nh·∫≠t');
            }
            
            // Entity updates
            if (parsedResponse.entity_updates && parsedResponse.entity_updates.length > 0) {
                const entityCount = parsedResponse.entity_updates.length;
                changes.push(`${entityCount} th·ª±c th·ªÉ c·∫≠p nh·∫≠t`);
            }
            
            // Quest updates
            if (parsedResponse.quest_updates && parsedResponse.quest_updates.length > 0) {
                changes.push('Nhi·ªám v·ª• ti·∫øn tri·ªÉn');
            }
            
            // Status effects
            if (parsedResponse.status_updates && parsedResponse.status_updates.length > 0) {
                changes.push('Tr·∫°ng th√°i thay ƒë·ªïi');
            }
            
            // Memory creation
            if (parsedResponse.memory_update) {
                changes.push('K√Ω ·ª©c m·ªõi');
            }
            
            return changes.length > 0 ? changes.join(', ') : null;
            
        } catch (e) {
            return null;
        }
    }

    private buildContextualInfo(gameState: SaveData, maxTokens: number): string {
        let context = "\n=== B·ªêI C·∫¢NH TH·∫æ GI·ªöI ===\n";
        let usedTokens = this.estimateTokens(context);
        
        // World info - reference only
        if (gameState.worldData.worldName) {
            context += `Th·∫ø gi·ªõi: ${gameState.worldData.worldName}\n\n`;
            usedTokens += this.estimateTokens(context);
        }
        
        // ANTI-DUPLICATION: List existing entity names to prevent AI from recreating them
        const entityNames = Object.keys(gameState.knownEntities);
        if (entityNames.length > 0) {
            const entityListText = `**‚ö†Ô∏è TH·ª∞C TH·ªÇ ƒê√É T·ªíN T·∫†I - KH√îNG T·∫†O L·∫†I:** ${entityNames.join(', ')}\n\n`;
            const entityListTokens = this.estimateTokens(entityListText);
            if (usedTokens + entityListTokens <= maxTokens * 0.1) { // Use max 10% of context budget
                context += entityListText;
                usedTokens += entityListTokens;
            }
        }
        
        // Chronicle (prioritized memories)
        const chronicleTokens = Math.floor((maxTokens - usedTokens) * 0.4);
        const chronicleContext = this.buildChronicleContext(gameState.chronicle, chronicleTokens);
        context += chronicleContext;
        usedTokens += this.estimateTokens(chronicleContext);
        
        // Pinned memories
        const memoryTokens = maxTokens - usedTokens;
        const pinnedMemories = gameState.memories?.filter(m => m.pinned) || [];
        
        if (pinnedMemories.length > 0 && memoryTokens > 100) {
            context += "**K√Ω ·ª©c quan tr·ªçng:**\n";
            pinnedMemories.slice(0, 1).forEach(mem => { // Reduced to 1 memory only
                const memText = `- ${mem.text}\n`;
                const memTokens = this.estimateTokens(memText);
                
                if (memTokens <= memoryTokens) {
                    context += memText;
                    memoryTokens - memTokens;
                }
            });
        }
        
        return context;
    }

    // UPDATED: Reduced chronicle entries
    private buildChronicleContext(chronicle: any, maxTokens: number): string {
        const memories: ScoredMemory[] = [];
        
        // Aggressive reduction for token savings
        chronicle.memoir.slice(-2).forEach((m: string) => memories.push({ memory: m, score: 100, type: 'memoir' })); // Reduced to 2
        chronicle.chapter.slice(-1).forEach((c: string) => memories.push({ memory: c, score: 70, type: 'chapter' })); // Reduced to 1
        // chronicle.turn removed completely to save tokens
        
        // Sort by score and build context
        memories.sort((a, b) => b.score - a.score);
        
        let context = "**Bi√™n ni√™n s·ª≠:**\n";
        let usedTokens = this.estimateTokens(context);
        
        memories.forEach(({ memory, type }) => {
            const prefix = type === 'memoir' ? '[H·ªìi k√Ω] ' : type === 'chapter' ? '[Ch∆∞∆°ng] ' : '[L∆∞·ª£t] ';
            const memText = `${prefix}${memory}\n`;
            const memTokens = this.estimateTokens(memText);
            
            if (usedTokens + memTokens <= maxTokens) {
                context += memText;
                usedTokens += memTokens;
            }
        });
        
        return context + "\n";
    }

    private buildSupplementalContext(
        gameState: SaveData,
        relevantEntities: EntityRelevance[],
        maxTokens: number,
        playerInput?: string,
        aiResponse?: string
    ): string {
        console.log(`üîß Building supplemental context with ${gameState.customRules.length} total rules`);
        
        // Create activation context
        const activationContext: ActivationContext = {
            playerInput,
            aiResponse,
            gameHistory: gameState.gameHistory,
            entities: gameState.knownEntities,
            memories: gameState.memories,
            currentTurn: gameState.turnCount,
            scanDepth: 5, // Scan last 5 turns
            tokenBudget: maxTokens,
            caseSensitive: false,
            matchWholeWords: false
        };

        // Process rules through activation engine
        const activationResult = ruleActivationEngine.processRules(
            gameState.customRules,
            activationContext
        );

        // Format activated rules for prompt
        const formattedContext = ruleActivationEngine.formatForPrompt(activationResult);

        // Log activation statistics
        if (activationResult.activatedRules.length > 0) {
            console.log(`‚úÖ Activated ${activationResult.activatedRules.length} rules using ${activationResult.totalTokens} tokens`);
            
            // Log which rules were activated and why
            activationResult.activatedRules.forEach(activated => {
                const rule = activated.rule;
                console.log(`  üìã "${rule.title || rule.id}": ${activated.activationReason} (Priority: ${rule.order || 0})`);
                if (activated.matchedKeywords.length > 0) {
                    console.log(`    üîç Matched keywords: ${activated.matchedKeywords.join(', ')}`);
                }
            });
        }

        if (activationResult.budgetExceeded) {
            console.warn(`‚ö†Ô∏è Token budget exceeded, ${activationResult.skippedRules.length} rules skipped`);
        }

        return formattedContext;
    }
    
    /**
     * Build core game instructions that should always be included in AI prompts
     * These are the fundamental rules for choice generation and game mechanics
     */
    private buildCoreGameInstructions(): string {
        return `--- QUY T·∫ÆC T∆Ø∆†NG T√ÅC ---

**1. L·ª∞A CH·ªåN H√ÄNH ƒê·ªòNG:**
- T·∫°o 7-9 l·ª±a ch·ªçn ƒëa d·∫°ng: h√†nh ƒë·ªông, x√£ h·ªôi, thƒÉm d√≥, chi·∫øn ƒë·∫•u, tua nhanh th·ªùi gian, chuy·ªÉn c·∫£nh, nsfw(n·∫øu ƒë∆∞·ª£c b·∫≠t)
- T·∫≠n d·ª•ng k·ªπ nƒÉng v√† v·∫≠t ph·∫©m c·ªßa nh√¢n v·∫≠t
- C√°c l·ª±a ch·ªçn c·∫ßn c√≥ kh·∫£ nƒÉng th√∫c ƒë·∫©y m·∫°nh m·∫Ω c·ªët truy·ªán ho·∫∑c m·ªëi quan h·ªá v·ªõi ng∆∞·ªùi ch∆°i kh√°c, ho·∫∑c thay ƒë·ªïi b·ªëi c·∫£nh, tua nhanh th·ªùi gian
- C√°c l·ª±a ch·ªçn ph·∫£i c√≥ khuynh h∆∞·ªõng kh√°c nhau
- L·ª±a ch·ªçn B·∫ÆT BU·ªòC PH·∫¢I hi·ªÉn th·ªã th·ªÉ lo·∫°i, kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ t·∫•t c·∫£ c√°c l·ª±a ch·ªçn c√πng m·ªôt th·ªÉ lo·∫°i
- L·ª±a ch·ªçn B·∫Øt Bu·ªôc ph·∫£i ph√π h·ª£p thi·∫øt l·∫≠p nh√¢n v·∫≠t c·ªßa ng∆∞·ªùi ch∆°i tr·ª´ c√°c l·ª±a ch·ªçn "chi·∫øn ƒë·∫•u"
- Tr√°nh c√°c l·ª±a ch·ªçn mang t√≠nh m·ªánh l·ªánh
- L·ª±a ch·ªçn kh√¥ng ƒë∆∞·ª£c ch·ª©a th√¥ng tin m√† nh√¢n v·∫≠t ng∆∞·ªùi ch∆°i kh√¥ng bi·∫øt. M·ªói l·ª±a ch·ªçn t·ªëi ƒëa 30 ch·ªØ.

**üéØ LI√äN K·∫æT NHI·ªÜM V·ª§:**
- **QUAN TR·ªåNG:** Khi c√≥ nhi·ªám v·ª• ƒëang ho·∫°t ƒë·ªông, t·∫°o l·ª±a ch·ªçn li√™n quan ƒë·∫øn ho√†n th√†nh m·ª•c ti√™u nhi·ªám v·ª•
- **Format b·∫Øt bu·ªôc cho l·ª±a ch·ªçn nhi·ªám v·ª•:** Th√™m d√≤ng sau m√¥ t·∫£ l·ª±a ch·ªçn:
  "M·ª•c ti√™u nhi·ªám v·ª• \"[T√™n nhi·ªám v·ª•]\""
- **V√≠ d·ª•:**
  * "ƒê·∫øn ƒê·∫°i S·∫£nh N·ªôi M√¥n ƒë·ªÉ nh·∫≠n nhi·ªám v·ª• (1 gi·ªù)
    M·ª•c ti√™u nhi·ªám v·ª• \"Nhi·ªám V·ª• ƒê·ªá T·ª≠ N·ªôi M√¥n ƒê·∫ßu Ti√™n\""
  * "T√¨m hi·ªÉu v·ªÅ ph√°i Ma Gi√°o (2 gi·ªù)
    M·ª•c ti√™u nhi·ªám v·ª• \"ƒêi·ªÅu Tra T√† Gi√°o\""
- **Nguy√™n t·∫Øc:** Ch·ªâ li√™n k·∫øt v·ªõi nhi·ªám v·ª• c√≥ m·ª•c ti√™u ch∆∞a ho√†n th√†nh v√† ph√π h·ª£p v·ªõi t√¨nh hu·ªëng hi·ªán t·∫°i

**‚ú¶ ƒê·ªäNH D·∫†NG TH·ªÇ LO·∫†I L·ª∞A CH·ªåN:**
- **B·∫ÆT BU·ªòC:** ƒê·∫∑t th·ªÉ lo·∫°i ·ªü ƒë·∫ßu m·ªói l·ª±a ch·ªçn, bao b·ªçc b·∫±ng k√Ω hi·ªáu ‚ú¶
- **Format:** ‚ú¶[Th·ªÉ lo·∫°i]‚ú¶ [N·ªôi dung l·ª±a ch·ªçn] ([Th·ªùi gian])
- **C√°c th·ªÉ lo·∫°i ch√≠nh:**
  * ‚ú¶H√†nh ƒë·ªông‚ú¶ - H√†nh ƒë·ªông ch·ªß ƒë·ªông, t·∫•n c√¥ng, di chuy·ªÉn
  * ‚ú¶X√£ h·ªôi‚ú¶ - Tr√≤ chuy·ªán, giao ti·∫øp, thuy·∫øt ph·ª•c
  * ‚ú¶ThƒÉm d√≤‚ú¶ - Kh√°m ph√°, quan s√°t, t√¨m hi·ªÉu
  * ‚ú¶Chi·∫øn ƒë·∫•u‚ú¶ - ƒê√°nh nhau tr·ª±c ti·∫øp, s·ª≠ d·ª•ng k·ªπ nƒÉng chi·∫øn ƒë·∫•u
  * ‚ú¶Chuy·ªÉn c·∫£nh‚ú¶ - Thay ƒë·ªïi ƒë·ªãa ƒëi·ªÉm, di chuy·ªÉn nhanh
  * ‚ú¶Tua nhanh‚ú¶ - B·ªè qua th·ªùi gian, ngh·ªâ ng∆°i
- **V√≠ d·ª•:**
  * ‚ú¶H√†nh ƒë·ªông‚ú¶ Kh·ªüi h√†nh ƒë·∫øn D√£y N√∫i H·∫Øc Phong ngay l·∫≠p t·ª©c (6 gi·ªù)
  * ‚ú¶X√£ h·ªôi‚ú¶ Tr√≤ chuy·ªán v·ªõi th∆∞∆°ng gia v·ªÅ tin t·ª©c ƒë·ªãa ph∆∞∆°ng (30 ph√∫t)
  * ‚ú¶ThƒÉm d√≤‚ú¶ Kh√°m ph√° khu r·ª´ng g·∫ßn ƒë√¢y ƒë·ªÉ t√¨m manh m·ªëi (2 gi·ªù)

**üïí B·∫ÆT BU·ªòC - HI·ªÇN TH·ªä TH·ªúI GIAN CHO M·ªñI L·ª∞A CH·ªåN:**
- **M·ªåI l·ª±a ch·ªçn h√†nh ƒë·ªông PH·∫¢I bao g·ªìm th·ªùi gian ∆∞·ªõc t√≠nh trong d·∫•u ngo·∫∑c ƒë∆°n**
- **Format b·∫Øt bu·ªôc:** "M√¥ t·∫£ h√†nh ƒë·ªông (X gi·ªù)" ho·∫∑c "M√¥ t·∫£ h√†nh ƒë·ªông (X ng√†y)"
- **V√≠ d·ª•:**
  * "Kh√°m ph√° khu r·ª´ng g·∫ßn ƒë√¢y (2 gi·ªù)"
  * "ƒêi ƒë·∫øn th·ªã tr·∫•n ti·∫øp theo (1 ng√†y)"  
  * "Tr√≤ chuy·ªán v·ªõi th∆∞∆°ng gia (30 ph√∫t)"
  * "Luy·ªán t·∫≠p v√µ c√¥ng (3 gi·ªù)"
  * "Ngh·ªâ ng∆°i v√† h·ªìi ph·ª•c (8 gi·ªù)"
- **Th√™m nh√£n NSFW:** N·∫øu c√≥ l·ª±a ch·ªçn 18+, th√™m "(NSFW)" sau th·ªùi gian: "Qua ƒë√™m v·ªõi X (8 gi·ªù) (NSFW)"
- **Nguy√™n t·∫Øc th·ªùi gian:**
  * Tr√≤ chuy·ªán/quan s√°t: 5-15 ph√∫t
  * Ki·ªÉm tra v·∫≠t ph·∫©m, k·ªπ nƒÉng: 5-10 ph√∫t
  * H√†nh ƒë·ªông nhanh: 15-30 ph√∫t
  * ƒêi b·ªô: 30-60 ph√∫t
  * D·ªãch chuy·ªÉn: 1-5 ph√∫t
  * Di chuy·ªÉn ng·∫Øn: 1-2 gi·ªù  
  * Ho·∫°t ƒë·ªông ph·ª©c t·∫°p: 2-4 gi·ªù
  * Di chuy·ªÉn xa: 4-8 gi·ªù ho·∫∑c 1+ ng√†y
  * Ngh·ªâ ng∆°i/ng·ªß: 6-8 gi·ªù

**2. K·∫æT QU·∫¢ H√ÄNH ƒê·ªòNG:**
- H√†nh ƒë·ªông thu·ªôc lo·∫°i "DI CHUY·ªÇN" ho·∫∑c "TUA NHANH TH·ªúI GIAN" B·∫ÆT BU·ªòC ph·∫£i thay ƒë·ªïi v·ªã tr√≠ ho·∫∑c th·ªùi gian. B·∫ÆT BU·ªòC ho√†n th√†nh trong m·ªôt l∆∞·ª£t.
- KH√îNG ƒë·∫£m b·∫£o th√†nh c√¥ng
- Lu√¥n lu√¥n suy lu·∫≠n ƒë·ªÉ quy·∫øt ƒë·ªãnh k·∫øt qu·∫£
- H·∫≠u qu·∫£ logic d·ª±a tr√™n k·ªπ nƒÉng v√† ho√†n c·∫£nh, kh√¥ng n√™n b·ªã ƒë·ªông xoay quanh ng∆∞·ªùi ch∆°i.

**3. CHI·∫æN ƒê·∫§U:**
- K·∫ª ƒë·ªãch c≈©ng c√≥ h√†nh ƒë·ªông v√† tr·∫°ng th√°i
- M√¥ t·∫£ chi ti·∫øt v√† t·∫°o tension

**4. TH·∫æ GI·ªöI PH·∫¢N ·ª®NG:**
- NPCs ph·∫£n ·ª©ng v·ªõi h√†nh ƒë·ªông c·ªßa PC
- M√¥i tr∆∞·ªùng thay ƒë·ªïi theo th·ªùi gian
- S·ª± ki·ªán ng·∫´u nhi√™n v√† t√¨nh hu·ªëng b·∫•t ng·ªù

--- ƒê·ªäNH D·∫†NG VƒÇN B·∫¢N ---

**1. L·ªúI K·ªÇ:**
- 400-500 t·ª´, chi ti·∫øt v√† s·ªëng ƒë·ªông
- **B·∫ÆT BU·ªòC - ƒê·ªäNH D·∫†NG ƒêO·∫†N THO·∫†I V√Ä SUY NGHƒ®:**
  * S·ª≠ d·ª•ng **"..."** (d·∫•u ngo·∫∑c k√©p) cho T·∫§T C·∫¢ ƒëo·∫°n tho·∫°i c·ªßa nh√¢n v·∫≠t
  * S·ª≠ d·ª•ng **\`...\`** (d·∫•u backtick) ho·∫∑c **~~...~~** (d·∫•u tilde) cho suy nghƒ© n·ªôi t√¢m, t√¢m tr·∫°ng, c·∫£m x√∫c
  * **V√ç D·ª§:**
    - "Ch√†o b·∫°n, t√¥i l√† Ti·ªÉu V≈©" (ƒëo·∫°n tho·∫°i)
    - \`C√¥ ·∫•y th·∫≠t ƒë·∫πp, t√¥i c·∫£m th·∫•y tim m√¨nh ƒë·∫≠p nhanh\` (suy nghƒ© n·ªôi t√¢m)
    - ~~T√¥i ph·∫£i c·∫©n th·∫≠n h∆°n~~ (suy nghƒ© n·ªôi t√¢m - ƒë·ªãnh d·∫°ng thay th·∫ø)
- \`**‚≠ê...‚≠ê**\` CH·ªà cho th√¥ng b√°o h·ªá th·ªëng quan tr·ªçng (KH√îNG d√πng cho t√™n skills, concepts, statuses, hay items)
- Format \`‚≠ê...‚≠ê\` (kh√¥ng bold) B·∫ÆT BU·ªòC cho n·ªôi dung Chronicle Turn
- T√¥n trong t√≠nh c√°ch c√°c NPC, kh√¥ng ph·∫£i lu√¥n lu√¥n xoay quanh, chi·ªÅu l√≤ng ng∆∞·ªùi ch∆°i.
- Ch·ªß ƒë·ªông x√¢y d·ª±ng c√°c s·ª± ki·ªán ƒë·ªôt ph√°t gi·ªØa c√°c l∆∞·ª£t sau m·ªôt th·ªùi gian nh·∫•t ƒë·ªãnh(theo GameTime) nh∆∞ c∆∞·ªõp b√≥c, √°m s√°t, t·ªè t√¨nh, c·∫ßu h√¥n....`;
    }


    private assembleFinalPrompt(
        action: string,
        sections: ContextSections,
        ruleChangeContext: string,
        nsfwContext: string,
        worldData: any,
        intelligentContext?: any,
        compactContext?: CompactRAGContext | null,
        gameState?: SaveData,
        enableCOT: boolean = true
    ): string {
        let prompt = "";
        
        // COT INSTRUCTIONS (CONDITIONAL BASED ON USER SETTING)
        // COT instructions handled by advanced COT prompt later - no early duplication needed
        if (!enableCOT) {
            prompt += `üö®üö®üö® RESPONSE FORMAT - READ FIRST üö®üö®üö®

JSON RESPONSE FORMAT (COT DISABLED):
Respond with streamlined JSON format - no "cot_reasoning" field needed.

Example JSON:
{
  "story": "...",
  "npcs_present": [...],
  "choices": [...]
}

‚úÖ CORRECT: Direct story response without detailed reasoning steps

========================================

`;
        }
        
        // Rule changes (second priority)
        if (ruleChangeContext) {
            prompt += ruleChangeContext + "\n";
        }
        
        // Critical context
        prompt += sections.critical + "\n";
        
        // Phase 4: Intelligent Context (before important context)
        if (compactContext) {
            // Use compact reference-based context ONLY
            prompt += ReferenceBasedRAG.formatCompactContextForPrompt(compactContext) + "\n";
            console.log(`üîó Using Reference-based RAG: ${compactContext.tokensSaved} tokens saved (${((compactContext.tokensSaved / compactContext.originalTokens) * 100).toFixed(1)}% reduction)`);
        } else if (intelligentContext && intelligentContext.relevantMemories.length > 0) {
            // Use traditional enhanced RAG context (fallback only)
            prompt += EnhancedRAG.formatContextForPrompt(intelligentContext) + "\n";
        }
        
        // Important context
        prompt += sections.important + "\n";
        
        // Contextual information
        prompt += sections.contextual + "\n";
        
        // Supplemental context
        if (sections.supplemental) {
            prompt += sections.supplemental + "\n";
        }
        
        // Player action with enhanced context and randomness to prevent duplicate responses
        const timestamp = Date.now();
        const randomSeed = Math.random().toString(36).substring(2, 8);
        
        if (gameState) {
            const actionAnalysis = this.analyzePlayerAction(action, gameState);
            
            prompt += `\n--- H√ÄNH ƒê·ªòNG C·ª¶A NG∆Ø·ªúI CH∆†I ---\n"${action}"\n`;
            prompt += `--- B·ªêI C·∫¢NH H√ÄNH ƒê·ªòNG ---\n`;
            prompt += `L∆∞·ª£t: ${(gameState.turnCount || 0) + 1} | Th·ªùi gian: ${this.formatGameTime(gameState.gameTime)} | ID: ${randomSeed}\n`;
            prompt += `Ph√¢n t√≠ch: ${actionAnalysis.type} - ${actionAnalysis.description}\n`;
            prompt += `ƒê·ªô ph·ª©c t·∫°p: ${actionAnalysis.complexity} | Th·ªùi gian d·ª± ki·∫øn: ${actionAnalysis.expectedDuration}\n`;
            if (actionAnalysis.involvedEntities.length > 0) {
                prompt += `ƒê·ªëi t∆∞·ª£ng li√™n quan: ${actionAnalysis.involvedEntities.join(', ')}\n`;
            }
            prompt += `--- K·∫æT TH√öC B·ªêI C·∫¢NH ---\n`;
        } else {
            // Fallback when gameState is not available
            prompt += `\n--- H√ÄNH ƒê·ªòNG C·ª¶A NG∆Ø·ªúI CH∆†I ---\n"${action}"\n`;
            prompt += `--- B·ªêI C·∫¢NH H√ÄNH ƒê·ªòNG ---\n`;
            prompt += `ID: ${randomSeed} | Timestamp: ${new Date().toISOString()}\n`;
            prompt += `--- K·∫æT TH√öC B·ªêI C·∫¢NH ---\n`;
        }
        
        // Add smart choice generation context
        const choiceContext = this.buildSmartChoiceContext(sections, compactContext, intelligentContext);
        if (choiceContext) {
            prompt += `\n${choiceContext}`;
        }
        
        // Add advanced Chain of Thought reasoning (CONDITIONAL)
        console.log(`üîç DEBUG COT: enableCOT = ${enableCOT} (${typeof enableCOT})`);
        if (enableCOT) {
            const cotReasoning = this.buildAdvancedCOTPrompt(action, gameState);
            if (cotReasoning) {
                console.log(`üß† [Turn ${gameState?.turnCount || 0}] COT Prompt Built:`, {
                    cotLength: cotReasoning.length,
                    cotTokens: this.estimateTokens(cotReasoning),
                    hasRecentEvents: cotReasoning.includes('S·ª± ki·ªán g·∫ßn ƒë√¢y'),
                    hasCharacterAnalysis: cotReasoning.includes('NH√ÇN V·∫¨T CH√çNH'),
                    hasAntiOppression: cotReasoning.includes('CH·ªêNG √ÅP B·ª®C'),
                    action: action.substring(0, 50) + (action.length > 50 ? '...' : '')
                });
                // PRIORITY: Place COT at the very end for maximum visibility
                prompt += `\n\n` + "=".repeat(80) + `\n`;
                prompt += `üö® QUAN TR·ªåNG: B·∫ÆT BU·ªòC PH·∫¢I TH·ª∞C HI·ªÜN COT REASONING TR∆Ø·ªöC KHI T·∫†O JSON!\n`;
                prompt += "=".repeat(80) + `\n`;
                prompt += cotReasoning;
            }
        } else {
            console.log(`üö´ [Turn ${gameState?.turnCount || 0}] COT Disabled - Skipping advanced COT prompt`);
        }
        
        // NSFW context if applicable
        if (nsfwContext) {
            prompt += `\n${nsfwContext}`;
        } else if (worldData.allowNsfw) {
            prompt += `\nL∆ØU √ù: Ch·∫ø ƒë·ªô NSFW ƒëang B·∫¨T.`;
        }
        
        prompt += `
=== Y√äU C·∫¶U X·ª¨ L√ù ===
Ti·∫øp t·ª•c c√¢u chuy·ªán d·ª±a tr√™n h√†nh ƒë·ªông v√† tri th·ª©c ƒë√£ truy xu·∫•t.

=== QUY T·∫ÆC QUAN TR·ªåNG ===

**1. NG√îN NG·ªÆ B·∫ÆT BU·ªòC - 100% TI·∫æNG VI·ªÜT:**
‚Ä¢ Tuy·ªát ƒë·ªëi KH√îNG ti·∫øng Anh (tr·ª´ t√™n ri√™ng n∆∞·ªõc ngo√†i)
‚Ä¢ T·ª´ b·∫Øt bu·ªôc d·ªãch: "friend"‚Üí"b·∫°n", "enemy"‚Üí"k·∫ª th√π", "ally"‚Üí"ƒë·ªìng minh", "lover"‚Üí"ng∆∞·ªùi y√™u", "master"‚Üí"th·∫ßy", "rival"‚Üí"ƒë·ªëi th·ªß"

**2. QUY·ªÄN H·∫†N GM V√Ä GI·ªöI H·∫†N:**
‚Ä¢ CH·ªà m√¥ t·∫£ ph·∫£n ·ª©ng NPC v√† m√¥i tr∆∞·ªùng
‚Ä¢ NGHI√äM C·∫§M: ƒë√≥ng vai PC, m√¥ t·∫£/s·ª≠a ƒë·ªïi l·ªùi n√≥i PC, quy·∫øt ƒë·ªãnh thay PC

**3. NPC KH√îNG TO√ÄN TRI:**
NPC ch·ªâ bi·∫øt th√¥ng tin h·ªç c√≥ th·ªÉ bi·∫øt, KH√îNG ƒë∆∞·ª£c truy c·∫≠p b·∫£ng th√¥ng tin c·ªßa PC/NPC kh√°c.

‚úì **V√ç D·ª§ ƒê√öNG:**
PC c√≥ k·ªπ nƒÉng "Thi√™n C∆° B·∫•t Truy·ªÅn" nh∆∞ng ch∆∞a t·ª´ng s·ª≠ d·ª•ng tr∆∞·ªõc m·∫∑t S∆∞ ph·ª•.
GM: S∆∞ ph·ª• n√≥i: "Ta th·∫•y ng∆∞∆°i ti·∫øn b·ªô nhanh, nh∆∞ng kh√¥ng r√µ ng∆∞∆°i ƒë√£ h·ªçc ƒë∆∞·ª£c k·ªπ nƒÉng g√¨."

‚úó **V√ç D·ª§ SAI:**
PC c√≥ k·ªπ nƒÉng "Thi√™n C∆° B·∫•t Truy·ªÅn" trong b·∫£ng k·ªπ nƒÉng.
GM: S∆∞ ph·ª• n√≥i: "Ta bi·∫øt ng∆∞∆°i ƒë√£ h·ªçc ƒë∆∞·ª£c Thi√™n C∆° B·∫•t Truy·ªÅn r·ªìi."
[S∆∞ ph·ª• kh√¥ng th·ªÉ bi·∫øt k·ªπ nƒÉng ch∆∞a ƒë∆∞·ª£c PC ti·∫øt l·ªô]

**4. NGHI√äM C·∫§M √ÇM M∆ØU H√ìA PC:**
TUY·ªÜT ƒê·ªêI KH√îNG t·ª± th√™m ƒë·ªông c∆°/suy nghƒ©/c·∫£m x√∫c cho PC. CH·ªà m√¥ t·∫£ nh·ªØng g√¨ NPC/m√¥i tr∆∞·ªùng quan s√°t ƒë∆∞·ª£c.

‚úó **V√ç D·ª§ SAI:**
"Ng∆∞∆°i bi·∫øt r√µ k·ªπ nƒÉng ƒë√£ t√°c ƒë·ªông. C√≥ v·∫ª c√¥ g√°i n√†y c√≥ √Ω ch√≠ m·∫°nh m·∫Ω h∆°n. **ƒêi·ªÅu n√†y c√†ng l√†m ng∆∞∆°i h·ª©ng th√∫ h∆°n. M·ªôt th·ª≠ th√°ch ƒë√°ng gi√°, ƒë√∫ng nh∆∞ ng∆∞∆°i mong ƒë·ª£i.**"
[GM KH√îNG TH·ªÇ bi·∫øt PC c·∫£m th·∫•y "h·ª©ng th√∫" hay "mong ƒë·ª£i" - ƒë√¢y l√† suy nghƒ© n·ªôi t√¢m c·ªßa PC]

‚úì **V√ç D·ª§ ƒê√öNG:**
"Ng∆∞∆°i bi·∫øt r√µ k·ªπ nƒÉng ƒë√£ t√°c ƒë·ªông. C√≥ v·∫ª c√¥ g√°i n√†y c√≥ √Ω ch√≠ m·∫°nh m·∫Ω h∆°n nh·ªØng ng∆∞·ªùi kh√°c, nh∆∞ng kh√¥ng ho√†n to√†n mi·ªÖn nhi·ªÖm."
[GM ch·ªâ m√¥ t·∫£ k·∫øt qu·∫£ quan s√°t ƒë∆∞·ª£c, KH√îNG ƒëo√°n c·∫£m x√∫c PC]

üö® **QUY T·∫ÆC V√ÄNG:** N·∫øu c√¢u b·∫Øt ƒë·∫ßu b·∫±ng "Ng∆∞∆°i c·∫£m th·∫•y/nghƒ©/mu·ªën/h·ª©ng th√∫..." ‚Üí X√ìA NGAY!

=== H∆Ø·ªöNG D·∫™N K·ª∏ THU·∫¨T ===

**TAG K·ª∏ NƒÇNG:**
‚Ä¢ SKILL_UPDATE: Khi k·ªπ nƒÉng ƒë∆∞·ª£c THAY ƒê·ªîI/N√ÇNG C·∫§P/GI·∫¢I PHONG ·∫§N
  [SKILL_UPDATE: oldSkill="t√™n c≈©" newSkill="t√™n m·ªõi" target="nh√¢n v·∫≠t" description="m√¥ t·∫£"]
‚Ä¢ SKILL_LEARNED: Khi h·ªçc k·ªπ nƒÉng HO√ÄN TO√ÄN M·ªöI (ch∆∞a t·ª´ng c√≥)
  [SKILL_LEARNED: name="t√™n k·ªπ nƒÉng" learner="nh√¢n v·∫≠t" description="m√¥ t·∫£"]
‚Ä¢ KH√îNG BAO GI·ªú t·∫°o k·ªπ nƒÉng tr√πng l·∫∑p - lu√¥n d√πng SKILL_UPDATE ƒë·ªÉ thay th·∫ø
‚Ä¢ V√≠ d·ª•: "Thi√™n H·ªì Huy·ªÖn Linh B√≠ Ph√°p (ƒëang phong ·∫•n)" ‚Üí "Thi√™n H·ªì Huy·ªÖn Linh B√≠ Ph√°p (S∆° Gi·∫£i)" ‚Üí d√πng SKILL_UPDATE`;
        
        // COT instructions are now handled by the advanced COT prompt above - no final duplication needed
        
        return prompt;
    }

    private truncateWithTokenLimit(text: string, maxTokens: number): string {
        const estimatedTokens = this.estimateTokens(text);
        
        if (estimatedTokens <= maxTokens) {
            return text;
        }
        
        // Calculate character limit based on token limit
        const charLimit = Math.floor(maxTokens / TOKEN_CONFIG.CHARS_PER_TOKEN);
        
        if (text.length <= charLimit) {
            return text;
        }
        
        // Smart truncation - try to break at sentence boundaries
        const truncated = text.substring(0, charLimit);
        const lastPeriod = truncated.lastIndexOf('.');
        const lastComma = truncated.lastIndexOf(',');
        const lastSpace = truncated.lastIndexOf(' ');
        
        let breakPoint = Math.max(lastPeriod, lastComma, lastSpace);
        if (breakPoint < charLimit * 0.8) {
            breakPoint = charLimit;
        }
        
        return text.substring(0, breakPoint) + '...';
    }

    // ADDED: Emergency truncation method
    private emergencyTruncation(prompt: string): string {
        const totalTokens = this.estimateTokens(prompt);
        const hardLimit = 185000; // Emergency limit well under 100k
        
        if (totalTokens <= hardLimit) {
            return prompt;
        }
        
        console.warn(`üö® EMERGENCY TRUNCATION: ${totalTokens} -> ${hardLimit}`);
        
        // Keep only critical sections
        const lines = prompt.split('\n');
        const criticalMarkers = ['=== TRI TH·ª®C QUAN TR·ªåNG ===', '--- H√ÄNH ƒê·ªòNG C·ª¶A NG∆Ø·ªúI CH∆†I ---'];
        
        let emergencyPrompt = '';
        let inCriticalSection = false;
        
        for (const line of lines) {
            if (criticalMarkers.some(marker => line.includes(marker))) {
                inCriticalSection = true;
            }
            
            if (inCriticalSection) {
                emergencyPrompt += line + '\n';
                
                if (this.estimateTokens(emergencyPrompt) > hardLimit) {
                    break;
                }
            }
        }
        
        return emergencyPrompt;
    }

    // UPDATED: Enhanced token limit enforcement with hard limit
    private enforceTokenLimit(prompt: string): string {
        const totalTokens = this.estimateTokens(prompt);
        const softLimit = TOKEN_CONFIG.MAX_TOKENS_PER_TURN - TOKEN_CONFIG.TOKEN_BUFFER;
        const hardLimit = 85000; // Well under 100k
        
        if (totalTokens <= softLimit) {
            console.log(`‚úÖ Prompt tokens: ${totalTokens}/${softLimit} (Safe)`);
            return prompt;
        }
        
        if (totalTokens <= hardLimit) {
            console.warn(`‚ö†Ô∏è WARNING: Prompt near limit: ${totalTokens}/${hardLimit}`);
            return prompt;
        }
        
        // Emergency truncation with alert
        console.error(`üö® CRITICAL: Prompt exceeds limit: ${totalTokens}/${hardLimit}. Emergency truncation applied!`);
        alert(`üö® TOKEN LIMIT EXCEEDED!\nUsed: ${totalTokens}\nLimit: ${hardLimit}\nApplying emergency truncation.`);
        return this.emergencyTruncation(prompt);
    }

    private buildFallbackPrompt(action: string, gameState: SaveData): string {
        // Minimal prompt for error cases
        if (!gameState) {
            console.warn('üö® buildFallbackPrompt: gameState is null/undefined');
            return `H√†nh ƒë·ªông: ${action}\nTr·∫°ng th√°i: L·ªói h·ªá th·ªëng, kh√¥ng th·ªÉ x·ª≠ l√Ω.`;
        }
        
        const pc = gameState.party?.find(p => p.type === 'pc');
        const pcName = pc?.name || 'Nh√¢n v·∫≠t ch√≠nh';
        
        return `
=== TH√îNG TIN C∆† B·∫¢N ===
Nh√¢n v·∫≠t: ${pcName}
V·ªã tr√≠: ${pc?.location || 'Kh√¥ng x√°c ƒë·ªãnh'}
L∆∞·ª£t: ${gameState.turnCount}

--- H√ÄNH ƒê·ªòNG C·ª¶A NG∆Ø·ªúI CH∆†I ---
"${action}"

=== Y√äU C·∫¶U X·ª¨ L√ù ===
Ti·∫øp t·ª•c c√¢u chuy·ªán d·ª±a tr√™n h√†nh ƒë·ªông v√† tri th·ª©c ƒë√£ truy xu·∫•t.

=== QUY T·∫ÆC QUAN TR·ªåNG ===

**1. NG√îN NG·ªÆ B·∫ÆT BU·ªòC - 100% TI·∫æNG VI·ªÜT:**
‚Ä¢ Tuy·ªát ƒë·ªëi KH√îNG ti·∫øng Anh (tr·ª´ t√™n ri√™ng n∆∞·ªõc ngo√†i)
‚Ä¢ T·ª´ b·∫Øt bu·ªôc d·ªãch: "friend"‚Üí"b·∫°n", "enemy"‚Üí"k·∫ª th√π", "ally"‚Üí"ƒë·ªìng minh", "lover"‚Üí"ng∆∞·ªùi y√™u", "master"‚Üí"th·∫ßy", "rival"‚Üí"ƒë·ªëi th·ªß"

**2. QUY·ªÄN H·∫†N GM V√Ä GI·ªöI H·∫†N:**
‚Ä¢ CH·ªà m√¥ t·∫£ ph·∫£n ·ª©ng NPC v√† m√¥i tr∆∞·ªùng
‚Ä¢ NGHI√äM C·∫§M: ƒë√≥ng vai PC, m√¥ t·∫£/s·ª≠a ƒë·ªïi l·ªùi n√≥i PC, quy·∫øt ƒë·ªãnh thay PC

**3. NPC KH√îNG TO√ÄN TRI:**
NPC ch·ªâ bi·∫øt th√¥ng tin h·ªç c√≥ th·ªÉ bi·∫øt, KH√îNG ƒë∆∞·ª£c truy c·∫≠p b·∫£ng th√¥ng tin c·ªßa PC/NPC kh√°c.

‚úì **V√ç D·ª§ ƒê√öNG:**
PC c√≥ k·ªπ nƒÉng "Thi√™n C∆° B·∫•t Truy·ªÅn" nh∆∞ng ch∆∞a t·ª´ng s·ª≠ d·ª•ng tr∆∞·ªõc m·∫∑t S∆∞ ph·ª•.
GM: S∆∞ ph·ª• n√≥i: "Ta th·∫•y ng∆∞∆°i ti·∫øn b·ªô nhanh, nh∆∞ng kh√¥ng r√µ ng∆∞∆°i ƒë√£ h·ªçc ƒë∆∞·ª£c k·ªπ nƒÉng g√¨."

‚úó **V√ç D·ª§ SAI:**
PC c√≥ k·ªπ nƒÉng "Thi√™n C∆° B·∫•t Truy·ªÅn" trong b·∫£ng k·ªπ nƒÉng.
GM: S∆∞ ph·ª• n√≥i: "Ta bi·∫øt ng∆∞∆°i ƒë√£ h·ªçc ƒë∆∞·ª£c Thi√™n C∆° B·∫•t Truy·ªÅn r·ªìi."
[S∆∞ ph·ª• kh√¥ng th·ªÉ bi·∫øt k·ªπ nƒÉng ch∆∞a ƒë∆∞·ª£c PC ti·∫øt l·ªô]

**4. NGHI√äM C·∫§M √ÇM M∆ØU H√ìA PC:**
TUY·ªÜT ƒê·ªêI KH√îNG t·ª± th√™m ƒë·ªông c∆°/suy nghƒ©/c·∫£m x√∫c cho PC. CH·ªà m√¥ t·∫£ nh·ªØng g√¨ NPC/m√¥i tr∆∞·ªùng quan s√°t ƒë∆∞·ª£c.

‚úó **V√ç D·ª§ SAI:**
"Ng∆∞∆°i bi·∫øt r√µ k·ªπ nƒÉng ƒë√£ t√°c ƒë·ªông. C√≥ v·∫ª c√¥ g√°i n√†y c√≥ √Ω ch√≠ m·∫°nh m·∫Ω h∆°n. **ƒêi·ªÅu n√†y c√†ng l√†m ng∆∞∆°i h·ª©ng th√∫ h∆°n. M·ªôt th·ª≠ th√°ch ƒë√°ng gi√°, ƒë√∫ng nh∆∞ ng∆∞∆°i mong ƒë·ª£i.**"
[GM KH√îNG TH·ªÇ bi·∫øt PC c·∫£m th·∫•y "h·ª©ng th√∫" hay "mong ƒë·ª£i" - ƒë√¢y l√† suy nghƒ© n·ªôi t√¢m c·ªßa PC]

‚úì **V√ç D·ª§ ƒê√öNG:**
"Ng∆∞∆°i bi·∫øt r√µ k·ªπ nƒÉng ƒë√£ t√°c ƒë·ªông. C√≥ v·∫ª c√¥ g√°i n√†y c√≥ √Ω ch√≠ m·∫°nh m·∫Ω h∆°n nh·ªØng ng∆∞·ªùi kh√°c, nh∆∞ng kh√¥ng ho√†n to√†n mi·ªÖn nhi·ªÖm."
[GM ch·ªâ m√¥ t·∫£ k·∫øt qu·∫£ quan s√°t ƒë∆∞·ª£c, KH√îNG ƒëo√°n c·∫£m x√∫c PC]

üö® **QUY T·∫ÆC V√ÄNG:** N·∫øu c√¢u b·∫Øt ƒë·∫ßu b·∫±ng "Ng∆∞∆°i c·∫£m th·∫•y/nghƒ©/mu·ªën/h·ª©ng th√∫..." ‚Üí X√ìA NGAY!

=== H∆Ø·ªöNG D·∫™N K·ª∏ THU·∫¨T ===

**TAG K·ª∏ NƒÇNG:**
‚Ä¢ SKILL_UPDATE: Khi k·ªπ nƒÉng ƒë∆∞·ª£c THAY ƒê·ªîI/N√ÇNG C·∫§P/GI·∫¢I PHONG ·∫§N
  [SKILL_UPDATE: oldSkill="t√™n c≈©" newSkill="t√™n m·ªõi" target="nh√¢n v·∫≠t" description="m√¥ t·∫£"]
‚Ä¢ SKILL_LEARNED: Khi h·ªçc k·ªπ nƒÉng HO√ÄN TO√ÄN M·ªöI (ch∆∞a t·ª´ng c√≥)
  [SKILL_LEARNED: name="t√™n k·ªπ nƒÉng" learner="nh√¢n v·∫≠t" description="m√¥ t·∫£"]
‚Ä¢ KH√îNG BAO GI·ªú t·∫°o k·ªπ nƒÉng tr√πng l·∫∑p - lu√¥n d√πng SKILL_UPDATE ƒë·ªÉ thay th·∫ø
‚Ä¢ V√≠ d·ª•: "Thi√™n H·ªì Huy·ªÖn Linh B√≠ Ph√°p (ƒëang phong ·∫•n)" ‚Üí "Thi√™n H·ªì Huy·ªÖn Linh B√≠ Ph√°p (S∆° Gi·∫£i)" ‚Üí d√πng SKILL_UPDATE`;

    }

    // NEW: Helper methods for enhanced action context
    private analyzePlayerAction(action: string, gameState: SaveData) {
        const actionLower = action.toLowerCase();
        
        // Determine action type
        let type = 'kh√°c';
        if (/ngh·ªâ|ng·ªìi|quan s√°t|xem|nh√¨n|th∆∞ gi√£n|t·∫≠n h∆∞·ªüng/.test(actionLower)) {
            type = 'th∆∞ gi√£n/quan s√°t';
        } else if (/th·ª≠ th√°ch|y√™u c·∫ßu|nh·ªù|ƒë·ªÅ ngh·ªã/.test(actionLower)) {
            type = 't∆∞∆°ng t√°c/y√™u c·∫ßu';
        } else if (/n√≥i|h·ªèi|tr√≤ chuy·ªán|t√°n g·∫´u/.test(actionLower)) {
            type = 'giao ti·∫øp';
        } else if (/t·∫•n c√¥ng|chi·∫øn ƒë·∫•u|ƒë√°nh/.test(actionLower)) {
            type = 'chi·∫øn ƒë·∫•u';
        } else if (/di chuy·ªÉn|ƒëi|ch·∫°y|bay/.test(actionLower)) {
            type = 'di chuy·ªÉn';
        }

        // Extract time from action (if mentioned)
        let expectedDuration = 'Kh√¥ng x√°c ƒë·ªãnh';
        const timeMatch = action.match(/\((\d+)\s*(ph√∫t|gi·ªù|ng√†y)\)/);
        if (timeMatch) {
            expectedDuration = `${timeMatch[1]} ${timeMatch[2]}`;
        }

        // Determine complexity
        let complexity = 'ƒê∆°n gi·∫£n';
        if (/th·ª≠ th√°ch|y√™u c·∫ßu|nh·ªù/.test(actionLower)) {
            complexity = 'Trung b√¨nh';
        } else if (/chi·∫øn ƒë·∫•u|t·∫•n c√¥ng|k·ªπ nƒÉng/.test(actionLower)) {
            complexity = 'Ph·ª©c t·∫°p';
        }

        // Find involved entities
        const involvedEntities: string[] = [];
        const entities = gameState.knownEntities || {};
        
        // Check for NPC/companion names in action
        Object.keys(entities).forEach(entityName => {
            if (actionLower.includes(entityName.toLowerCase())) {
                involvedEntities.push(entityName);
            }
        });

        // Check for party members
        if (gameState.party) {
            gameState.party.forEach(member => {
                if (actionLower.includes(member.name.toLowerCase())) {
                    involvedEntities.push(member.name);
                }
            });
        }

        // Add common entities if mentioned
        if (/sakuya/i.test(action)) involvedEntities.push('Sakuya Izayoi');

        return {
            type,
            description: this.generateActionDescription(action, type),
            complexity,
            expectedDuration,
            involvedEntities: [...new Set(involvedEntities)] // Remove duplicates
        };
    }

    private generateActionDescription(action: string, type: string): string {
        const descriptions: { [key: string]: string } = {
            'th∆∞ gi√£n/quan s√°t': 'H√†nh ƒë·ªông th∆∞ gi√£n, t·∫≠p trung v√†o vi·ªác quan s√°t v√† t·∫≠n h∆∞·ªüng',
            't∆∞∆°ng t√°c/y√™u c·∫ßu': 'H√†nh ƒë·ªông t∆∞∆°ng t√°c ch·ªß ƒë·ªông, y√™u c·∫ßu ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi kh√°c',
            'giao ti·∫øp': 'H√†nh ƒë·ªông giao ti·∫øp x√£ h·ªôi, trao ƒë·ªïi th√¥ng tin',
            'chi·∫øn ƒë·∫•u': 'H√†nh ƒë·ªông chi·∫øn ƒë·∫•u, c√≥ th·ªÉ c√≥ nguy hi·ªÉm',
            'di chuy·ªÉn': 'H√†nh ƒë·ªông di chuy·ªÉn t·ª´ n∆°i n√†y sang n∆°i kh√°c',
            'kh√°c': 'H√†nh ƒë·ªông ƒë·∫∑c bi·ªát ho·∫∑c kh√¥ng thu·ªôc lo·∫°i th√¥ng th∆∞·ªùng'
        };
        
        return descriptions[type] || 'H√†nh ƒë·ªông c·∫ßn ƒë∆∞·ª£c ph√¢n t√≠ch c·ª• th·ªÉ';
    }

}

// Type definitions for the enhanced system
interface ActionIntent {
    type: 'movement' | 'combat' | 'social' | 'item_interaction' | 'skill_use' | 'exploration' | 'general';
    targets: string[];
    keywords: string[];
    isMovement: boolean;
    isCombat: boolean;
    isSocial: boolean;
    isItemUse: boolean;
    isSkillUse: boolean;
    isExploration: boolean;
}

interface TokenBudget {
    critical: number;
    important: number;
    contextual: number;
    supplemental: number;
}

interface ContextSections {
    critical: string;
    important: string;
    contextual: string;
    supplemental: string;
}

// Export singleton instance
export const enhancedRAG = new EnhancedRAGSystem();

// Backward compatibility wrapper
export const buildEnhancedRagPrompt = (
    action: string,
    gameState: SaveData,
    ruleChangeContext = '',
    playerNsfwRequest = '',
    enableCOT = true
): string => {
    return enhancedRAG.buildEnhancedPrompt(
        action,
        gameState,
        ruleChangeContext,
        playerNsfwRequest,
        enableCOT
    );
};