/**
 * Test for History Compression Story Flow Fix
 * Tests the enhanced compression system that preserves choice context and story flow
 */

import { HistoryManager, type CompressedHistorySegment } from './components/HistoryManager';
import type { GameHistoryEntry } from './components/types';

// Mock game history entries with choices and story content
const mockHistoryEntries: GameHistoryEntry[] = [
    {
        role: 'user',
        parts: [{ text: '--- H√ÄNH ƒê·ªòNG C·ª¶A NG∆Ø·ªúI CH∆†I ---\n"T·∫•n c√¥ng con goblin"' }]
    },
    {
        role: 'model',
        parts: [{
            text: JSON.stringify({
                story: "B·∫°n lao v√†o t·∫•n c√¥ng con goblin v·ªõi thanh ki·∫øm. Con qu√°i v·∫≠t r√©o l√™n v√† c·ªë g·∫Øng ph·∫£n k√≠ch.",
                choices: ["Ti·∫øp t·ª•c t·∫•n c√¥ng", "N√© tr√°nh", "D√πng k·ªπ nƒÉng ƒë·∫∑c bi·ªát"],
                status: { health: 80 }
            })
        }]
    },
    {
        role: 'user',
        parts: [{ text: '--- H√ÄNH ƒê·ªòNG C·ª¶A NG∆Ø·ªúI CH∆†I ---\n"Ti·∫øp t·ª•c t·∫•n c√¥ng"' }]
    },
    {
        role: 'model',
        parts: [{
            text: JSON.stringify({
                story: "B·∫°n ƒë√¢m th·∫≥ng v√†o tim con goblin. N√≥ ng√£ xu·ªëng v√† ch·∫øt. B·∫°n nh·∫≠n ƒë∆∞·ª£c 50 ƒëi·ªÉm kinh nghi·ªám.",
                choices: ["L·∫•y chi·∫øn l·ª£i ph·∫©m", "Ti·∫øp t·ª•c kh√°m ph√°", "Ngh·ªâ ng∆°i"],
                status: { health: 80, exp: 150 }
            })
        }]
    },
    {
        role: 'user',
        parts: [{ text: '--- H√ÄNH ƒê·ªòNG C·ª¶A NG∆Ø·ªúI CH∆†I ---\n"L·∫•y chi·∫øn l·ª£i ph·∫©m"' }]
    },
    {
        role: 'model',
        parts: [{
            text: JSON.stringify({
                story: "B·∫°n t√¨m ki·∫øm x√°c con goblin v√† t√¨m th·∫•y 5 ƒë·ªìng xu v√† m·ªôt chi·∫øc dao nh·ªè.",
                choices: ["C·∫ßm dao", "Ch·ªâ l·∫•y ti·ªÅn", "B·ªè qua t·∫•t c·∫£"],
                items: ["Dao goblin", "5 ƒë·ªìng xu"]
            })
        }]
    }
];

function testCompressionFix() {
    console.log('üß™ Testing History Compression Story Flow Fix...\n');
    
    // Test compression with the enhanced system
    const result = HistoryManager.manageHistory(
        mockHistoryEntries,
        45, // Turn number after compression threshold
        {
            maxActiveEntries: 2,
            compressionThreshold: 4, // Force compression
            summaryLength: 200
        }
    );
    
    console.log('üìä Compression Results:');
    console.log('- Should compress:', result.shouldCompress);
    console.log('- Original entries:', result.stats.originalSize);
    console.log('- Active entries kept:', result.stats.newSize);
    console.log('- Entries compressed:', result.stats.savedEntries);
    
    if (result.compressedSegment) {
        const segment = result.compressedSegment;
        console.log('\nüì¶ Compressed Segment:');
        console.log('- Turn range:', segment.turnRange);
        console.log('- Summary:', segment.summary);
        console.log('- Key actions:', segment.keyActions);
        console.log('- Important events:', segment.importantEvents);
        console.log('- Preserved choices:', segment.recentChoices); // NEW FIELD
        console.log('- Story flow:', segment.storyFlow); // NEW FIELD
        console.log('- Token count:', segment.tokenCount);
        
        // Test the fix: Check if choices and story flow are preserved
        const hasChoices = segment.recentChoices && segment.recentChoices.length > 0;
        const hasStoryFlow = segment.storyFlow && segment.storyFlow.length > 0;
        
        console.log('\n‚úÖ Fix Verification:');
        console.log('- Choices preserved:', hasChoices ? '‚úì' : '‚úó');
        console.log('- Story flow preserved:', hasStoryFlow ? '‚úì' : '‚úó');
        
        if (hasChoices) {
            console.log('  ‚Üí Preserved choices:', segment.recentChoices.join(', '));
        }
        if (hasStoryFlow) {
            console.log('  ‚Üí Story flow patterns:', segment.storyFlow.join(' | '));
        }
        
        // Verify the fix addresses the original issues
        if (hasChoices && hasStoryFlow) {
            console.log('\nüéâ SUCCESS: The fix should prevent story looping and duplicate choices!');
            console.log('   The AI will now have access to compressed choice history and story flow.');
        } else {
            console.log('\n‚ùå ISSUES: Some data may still be lost during compression.');
        }
    }
}

// Run the test
testCompressionFix();