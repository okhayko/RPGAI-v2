// Test script ƒë·ªÉ ki·ªÉm tra token savings t·ª´ AI-response-only history optimization
import { enhancedRAG } from './components/promptBuilder';
import type { SaveData, GameHistoryEntry } from './components/types';

// Mock game state v·ªõi history data th·ª±c t·∫ø
const mockGameState: SaveData = {
    worldData: {
        worldName: "Test World",
        genre: "fantasy",
        allowNsfw: false,
        worldDescription: "A fantasy world for testing",
        difficultyLevel: "normal",
        playerName: ""
    },
    knownEntities: {
        "Test NPC": {
            id: "npc1",
            name: "Test NPC",
            type: "npc",
            description: "A test character",
            location: "Test Location",
            personality: "Friendly and helpful",
            skills: ["Magic", "Combat"]
        }
    },
    statuses: [],
    quests: [],
    gameHistory: [] as GameHistoryEntry[], // S·∫Ω ƒë∆∞·ª£c ƒëi·ªÅn sau
    memories: [],
    party: [{
        id: "pc1",
        name: "Hero",
        type: "pc",
        description: "The main character",
        location: "Test Location",
        motivation: "Save the world",
        realm: "Mortal",
        learnedSkills: ["Basic Combat"]
    }],
    customRules: [],
    regexRules: [],
    systemInstruction: "",
    turnCount: 10,
    totalTokens: 50000,
    gameTime: { year: 2024, month: 1, day: 1, hour: 12 },
    chronicle: {
        memoir: ["Started the adventure"],
        chapter: ["First chapter"],
        turn: ["First turn"]
    },
    compressedHistory: [],
    historyStats: { totalSegments: 0, totalTokensSaved: 0, averageCompressionRatio: 0 },
    cleanupStats: { totalCleaned: 0, lastCleanup: Date.now() },
    archivedMemories: [],
    memoryStats: { total: 0, pinned: 0, archived: 0, averageImportance: 0 },
    storyLog: [],
    choices: [],
    locationDiscoveryOrder: [],
    choiceHistory: []
};

// T·∫°o mock history v·ªõi user prompts d√†i v√† AI responses
const createMockHistory = (entryCount: number): GameHistoryEntry[] => {
    const history: GameHistoryEntry[] = [];
    
    for (let i = 0; i < entryCount; i++) {
        // User entry (r·∫•t d√†i v·ªõi full context)
        const userPrompt = `
=== TRI TH·ª®C QUAN TR·ªåNG ===
Th·ªùi gian: NƒÉm 2024 Th√°ng 1 Ng√†y ${i + 1}, 12 gi·ªù 0 ph√∫t (L∆∞·ª£t ${i})

**T·ªî ƒê·ªòI PHI·ªÄU L∆ØU:**
[Nh√¢n v·∫≠t ch√≠nh] Hero - **M·ª§C TI√äU**: Save the world, V·ªã tr√≠: Test Location, Th·ª±c l·ª±c: Mortal, K·ªπ nƒÉng: Basic Combat

=== TH√îNG TIN LI√äN QUAN ===
**Di·ªÖn bi·∫øn g·∫ßn ƒë√¢y:**
> Previous action context here...

=== B·ªêI C·∫¢NH TH·∫æ GI·ªöI ===
Th·∫ø gi·ªõi: Test World

**Bi√™n ni√™n s·ª≠:**
[H·ªìi k√Ω] Started the adventure
[Ch∆∞∆°ng] First chapter

--- H√ÄNH ƒê·ªòNG C·ª¶A NG∆Ø·ªúI CH∆†I ---
"T√¥i mu·ªën n√≥i chuy·ªán v·ªõi Test NPC v·ªÅ nhi·ªám v·ª• c·ªßa m√¨nh"

--- B·ªêI C·∫¢NH H√ÄNH ƒê·ªòNG ---
L∆∞·ª£t: ${i} | Th·ªùi gian: NƒÉm 2024 Th√°ng 1 Ng√†y ${i + 1}, 12 gi·ªù 0 ph√∫t | ID: test${i}
Ph√¢n t√≠ch: giao ti·∫øp - H√†nh ƒë·ªông giao ti·∫øp x√£ h·ªôi, trao ƒë·ªïi th√¥ng tin
ƒê·ªô ph·ª©c t·∫°p: ƒê∆°n gi·∫£n | Th·ªùi gian d·ª± ki·∫øn: Kh√¥ng x√°c ƒë·ªãnh
ƒê·ªëi t∆∞·ª£ng li√™n quan: Test NPC

=== QUY T·∫ÆC QUAN TR·ªåNG ===
[... very long rules and instructions ...]
        `.trim();
        
        history.push({
            role: 'user',
            parts: [{ text: userPrompt }]
        });
        
        // AI response (ng·∫Øn h∆°n nhi·ªÅu)
        const aiResponse = JSON.stringify({
            story: `Hero ti·∫øn ƒë·∫øn g·∫ßn Test NPC v√† b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán. Test NPC nh√¨n l√™n v√† m·ªâm c∆∞·ªùi: "Ch√†o m·ª´ng, anh h√πng! Ta ƒë√£ nghe v·ªÅ nhi·ªám v·ª• c·ªßa ng∆∞∆°i. C√≥ ƒëi·ªÅu g√¨ ta c√≥ th·ªÉ gi√∫p ƒë∆∞·ª£c kh√¥ng?"`,
            entity_updates: [{
                name: "Test NPC",
                changes: { relationship: "Friendly" }
            }],
            choices: [
                "H·ªèi v·ªÅ nhi·ªám v·ª• c·ª©u th·∫ø gi·ªõi",
                "Y√™u c·∫ßu l·ªùi khuy√™n v·ªÅ chi·∫øn ƒë·∫•u",
                "T·∫°m bi·ªát v√† r·ªùi ƒëi"
            ]
        });
        
        history.push({
            role: 'model',
            parts: [{ text: aiResponse }]
        });
    }
    
    return history;
};

// Test function
const testHistoryOptimization = () => {
    console.log('üß™ Testing AI-Response-Only History Optimization\n');
    
    // T·∫°o mock history v·ªõi 5 turns (10 entries)
    const mockHistory = createMockHistory(5);
    mockGameState.gameHistory = mockHistory;
    
    console.log(`üìä Test Data:
- Total history entries: ${mockHistory.length}
- User entries: ${mockHistory.filter(e => e.role === 'user').length}  
- AI entries: ${mockHistory.filter(e => e.role === 'model').length}`);
    
    // Calculate token usage c·ªßa full history
    const fullHistoryTokens = mockHistory.reduce((total, entry) => {
        return total + Math.ceil(entry.parts[0].text.length / 1.2); // chars per token estimate
    }, 0);
    
    console.log(`\nüíæ Full History Token Usage: ${fullHistoryTokens} tokens`);
    
    // Test new optimized method
    console.log('\nüîß Testing optimized buildSmartHistoryContext...');
    
    const maxTokensForHistory = 2000;
    
    // G·ªçi private method th√¥ng qua reflection (for testing)
    const ragInstance = (enhancedRAG as any);
    const optimizedContext = ragInstance.buildSmartHistoryContext(mockHistory, maxTokensForHistory);
    const optimizedTokens = Math.ceil(optimizedContext.length / 1.2);
    
    console.log(`\nüìà Results:
- Original full history: ${fullHistoryTokens} tokens
- Optimized context: ${optimizedTokens} tokens  
- Token savings: ${fullHistoryTokens - optimizedTokens} tokens
- Reduction: ${((fullHistoryTokens - optimizedTokens) / fullHistoryTokens * 100).toFixed(1)}%`);
    
    console.log(`\nüìù Optimized Context Preview:
${optimizedContext.substring(0, 500)}...`);
    
    // Test story continuity extraction
    console.log('\nüé≠ Testing story continuity extraction...');
    const aiResponse = JSON.parse(mockHistory[1].parts[0].text); // First AI response
    const storyContinuity = ragInstance.extractStoryContinuity(aiResponse.story);
    console.log(`Story continuity extracted: "${storyContinuity}"`);
    
    // Test state changes extraction
    const stateChanges = ragInstance.extractStateChanges(aiResponse);
    console.log(`State changes extracted: "${stateChanges}"`);
    
    console.log('\n‚úÖ History optimization test completed!');
};

// Ch·∫°y test
testHistoryOptimization();